"use client";
import { TextField } from "../fields/TextField";
import { DropdownField } from "../fields/DropdownField";
import { RefField } from "../fields/RefField";
import {
  AutoGeneratedField,
  formatConfirmationNumber,
} from "../fields/AutoGeneratedField";
import { DownloadPDFButton } from "../pdf/DownloadPDFButton";
import { BOOKING_STATUS_OPTIONS } from "./bookingConstants";
import { determineBookingStatus, getStatusLabel } from "./bookingStatusUtils";
import { useState, useEffect, useRef, useMemo } from "react";
import { toast } from "sonner";

export function BookingDetails({ bookingsContext, stays }) {
  const [statusValue, setStatusValue] = useState("upcoming_no_action");
  const trackerRef = useRef({ downloadClicked: false, emailClicked: false });

  // Memoize the booking ID to make component more stable and prevent unnecessary re-renders
  const bookingId = useMemo(
    () => bookingsContext.selectedItem?._id,
    [bookingsContext.selectedItem?._id]
  );

  const handleFieldChange = (fieldPath, value, displayValue) => {
    bookingsContext.updateField(fieldPath, value);
  };

  const isFieldChanged = (fieldPath) => {
    return !!bookingsContext.pendingChanges[fieldPath];
  };

  const confirmationEntityOptions = [
    {
      value: "Corporate Meeting Partner B.V.",
      label: "CMP BV",
    },
    {
      value: "Corporate Meeting Partner (UK) Ltd.",
      label: "CMP Ltd",
    },
  ];

  // Regular status update based on data changes and page load
  useEffect(() => {
    if (bookingsContext.selectedItem) {
      const newStatus = determineBookingStatus(
        bookingsContext.selectedItem,
        stays
      );
      setStatusValue(newStatus);

      // Update the status in the context if it's different
      if (bookingsContext.selectedItem.status !== newStatus) {
        bookingsContext.updateField("status", newStatus);
      }
    }
  }, [
    bookingsContext.selectedItem, // Check on any booking change including load
    bookingsContext.selectedItem?.confirmationSent,
    bookingsContext.selectedItem?.travelPeriodEnd,
    bookingsContext.selectedItem?.salesInvoice,
    bookingsContext.selectedItem?.commissionInvoiceNo,
    stays,
  ]);

  // Track PDF downloads and email clicks
  useEffect(() => {
    // This effect now only tracks clicks, it doesn't create the mailto link
    const downloadButton = document.querySelector(
      ".download-button-container button:first-child"
    );
    // The selector for the email button might need adjustment if it's not an `a` tag anymore
    const emailButton = document.querySelector(
      ".download-button-container button:nth-child(2)"
    );

    if (downloadButton) {
      const handleDownloadClick = () => {
        trackerRef.current.downloadClicked = true;
        checkBothActions();
      };
      downloadButton.addEventListener("click", handleDownloadClick);
      return () =>
        downloadButton.removeEventListener("click", handleDownloadClick);
    }

    if (emailButton) {
      const handleEmailClick = () => {
        trackerRef.current.emailClicked = true;
        checkBothActions();
      };
      emailButton.addEventListener("click", handleEmailClick);
      return () => emailButton.removeEventListener("click", handleEmailClick);
    }
  }, [bookingId, stays]);

  const checkBothActions = () => {
    if (trackerRef.current.downloadClicked && trackerRef.current.emailClicked) {
      if (!bookingsContext.selectedItem?.confirmationSent) {
        bookingsContext.updateField("confirmationSent", true);
        toast.success("Confirmation marked as sent");
      }
    }
  };

  // Helper function to format date, needed for the email body
  const formatDate = (dateString) => {
    if (!dateString) return "-";
    try {
      return new Date(dateString).toLocaleDateString("en-GB", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });
    } catch (error) {
      return dateString;
    }
  };

  const handleSendConfirmation = (bookerData, preparedStays) => {
    const bookerFirstName = bookerData?.general?.firstName || "";
    const bookerLastName = bookerData?.general?.lastName || "";
    const bookerFullName = `${bookerFirstName} ${bookerLastName}`.trim();

    let subject;
    if (preparedStays && preparedStays.length > 0) {
      const firstStay = preparedStays[0];
      const hotelName = firstStay.hotelName || "the hotel";
      const guestName =
        firstStay.guestNames && firstStay.guestNames.length > 0
          ? firstStay.guestNames[0]
          : "your guest";
      const checkInDate = formatDate(firstStay.checkInDate);
      subject = `Your reservation confirmation at ${hotelName} for ${guestName} on ${checkInDate}`;
    } else {
      subject = `Booking Confirmation: ${
        bookingsContext.selectedItem?.confirmationNo || ""
      }`;
    }

    let stayDetailsText = "";
    if (preparedStays && preparedStays.length > 0) {
      stayDetailsText = preparedStays
        .map((stay) => {
          const guestNames =
            stay.guestNames && stay.guestNames.length > 0
              ? stay.guestNames.join(", ")
              : "N/A";
          const hotelName = stay.hotelName || "N/A";
          const checkIn = formatDate(stay.checkInDate);
          const checkOut = formatDate(stay.checkOutDate);
          return `Hotel: ${hotelName}, Guest: ${guestNames}, Check-in date: ${checkIn}, Check-out date: ${checkOut}`;
        })
        .join("\n"); // Each stay on a new line
    }

    // --- MODIFICATION START ---

    // 1. Define the body content separately.
    const bodyContent = `Dear ${bookerFullName},

Thank you for making your reservation with us. Please find attached your booking confirmation for the following details:

${stayDetailsText}

Should you have any questions or need to make any changes, please do not hesitate to contact us directly.

We hope you and/or your guest(s) have a pleasant stay.`;

    // 2. Copy the body content to the clipboard.
    navigator.clipboard.writeText(bodyContent).then(
      () => {
        // Success! Inform the user.
        toast.success("Email content copied to clipboard. Please paste it into your new email.");
      },
      (err) => {
        // Error. The user will have to copy manually.
        toast.error("Could not copy email content to clipboard.");
        console.error("Could not copy text: ", err);
      }
    );

    const bccEmail = "reservations@corporatemeetingpartner.com";
    
    // 3. Create the mailtoUrl WITHOUT the body parameter.
    const mailtoUrl = `mailto:${
      bookerData?.general?.email || ""
    }?subject=${encodeURIComponent(subject)}&bcc=${bccEmail}`;

    // --- MODIFICATION END ---

    window.open(mailtoUrl, "_blank");

    // Also track the email click for status updates
    trackerRef.current.emailClicked = true;
    checkBothActions();
  };


  return (
    <>
      <div className="col-half">
        <AutoGeneratedField
          label="Booking reference"
          fieldPath="confirmationNo"
          value={bookingsContext.selectedItem?.confirmationNo || ""}
          updateField={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          isChanged={isFieldChanged("confirmationNo")}
          allowRefresh={true}
        />
        <TextField
          label="Confirmation Date"
          fieldPath="confirmationDate"
          value={
            bookingsContext.selectedItem?.confirmationDate ||
            new Date().toISOString().split("T")[0]
          }
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          type="date"
          isChanged={isFieldChanged("confirmationDate")}
        />
        <RefField
          label="Booker"
          fieldPath="bookerId"
          value={bookingsContext.selectedItem?.bookerId || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          collectionName="contacts"
          displayFields={["general.firstName", "general.lastName"]}
          displaySeparator=" "
          isChanged={isFieldChanged("bookerId")}
          setFieldLoading={bookingsContext.setFieldLoading}
          key={`booker-${bookingId}`}
        />
        <TextField
          label="Cost Centre"
          fieldPath="costCentre"
          value={bookingsContext.selectedItem?.costCentre || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          isChanged={isFieldChanged("costCentre")}
        />
        <TextField
          label="Arrival date"
          fieldPath="travelPeriodStart"
          value={bookingsContext.selectedItem?.travelPeriodStart || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          type="date"
          required={true}
          isChanged={isFieldChanged("travelPeriodStart")}
        />
        <TextField
          label="Departure date"
          fieldPath="travelPeriodEnd"
          value={bookingsContext.selectedItem?.travelPeriodEnd || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          type="date"
          required={true}
          isChanged={isFieldChanged("travelPeriodEnd")}
        />
      </div>
      <div className="col-half">
        <RefField
          label="Company"
          fieldPath="companyId"
          value={bookingsContext.selectedItem?.companyId || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          collectionName="companies"
          displayFields={["name"]}
          isChanged={isFieldChanged("companyId")}
          setFieldLoading={bookingsContext.setFieldLoading}
          displaySeparator="<br>"
          key={`company-${bookingId}`}
        />

        <TextField
          label="Sales invoice"
          fieldPath="salesInvoice"
          value={bookingsContext.selectedItem?.salesInvoice || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          isChanged={isFieldChanged("salesInvoice")}
        />
        <TextField
          label="Notes"
          fieldPath="notes"
          value={bookingsContext.selectedItem?.notes || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          multiline={true}
          rows={4}
          isChanged={isFieldChanged("notes")}
        />
        <DropdownField
          label="Confirmation entity"
          fieldPath="confirmationEntity"
          value={
            bookingsContext.selectedItem?.confirmationEntity ||
            "Corporate Meeting Partner B.V."
          }
          onChange={handleFieldChange}
          options={confirmationEntityOptions}
          isEditing={bookingsContext.isEditing}
          isChanged={isFieldChanged("confirmationEntity")}
        />
        <DownloadPDFButton
          bookingData={bookingsContext.selectedItem}
          stays={stays}
          disabled={bookingsContext.isEditing}
          onSendConfirmation={handleSendConfirmation}
        />
        <div className="checkbox-field">
          <input
            type="checkbox"
            id="confirmationSent"
            checked={bookingsContext.selectedItem?.confirmationSent || false}
            onChange={(e) =>
              handleFieldChange("confirmationSent", e.target.checked)
            }
            disabled={!bookingsContext.isEditing}
          />
          <label htmlFor="confirmationSent" className="checkbox-label">
            Confirmation sent
          </label>
          {isFieldChanged("confirmationSent") && (
            <div className="field-changed-indicator"></div>
          )}
        </div>
      </div>
    </>
  );
}