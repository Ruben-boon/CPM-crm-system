"use client";
import { TextField } from "../fields/TextField";
import { DropdownField } from "../fields/DropdownField";
import { RefField } from "../fields/RefField";
import {
  AutoGeneratedField,
  formatConfirmationNumber,
} from "../fields/AutoGeneratedField";
import { DownloadPDFButton } from "../pdf/DownloadPDFButton";
import { BOOKING_STATUS_OPTIONS } from "./bookingConstants";
import { getStatusLabel, determineBookingStatus } from "./bookingStatusUtils";
import { useState, useEffect, useRef, useMemo, useCallback } from "react";
import { toast } from "sonner";
import { CalculatedDateField } from "../fields/CalculatedDateField";
import { useBookingStatus } from "@/hooks/useBookingStatus";

export function BookingDetails({ bookingsContext, stays }) {
  console.log("ðŸŽ¯ BookingDetails component rendered");
  const trackerRef = useRef({ downloadClicked: false, emailClicked: false });

  // Use the new booking status hook
  const {
    currentStatus,
    calculatedStatus,
    isCalculating,
    error: statusError,
    updateStatus
  } = useBookingStatus({
    booking: bookingsContext.selectedItem,
    stays,
    onStatusUpdate: async (newStatus) => {
      if (!bookingsContext.selectedItem?._id) return false;
      
      console.log(`ðŸ’¾ Saving status to database: ${newStatus}`);
      
      try {
        // Save to database first
        const updatedItem = {
          ...bookingsContext.selectedItem,
          status: newStatus,
        };
        const success = await bookingsContext.updateItem(updatedItem);
        
        if (success) {
          // Only update local state after successful database save
          bookingsContext.updateField("status", newStatus);
          console.log(`ðŸ’¾ Status saved to database successfully`);
        } else {
          console.log(`ðŸ’¾ Failed to save status to database`);
        }
        
        return success;
      } catch (error) {
        console.error('Error updating status:', error);
        return false;
      }
    }
  });

  const confirmationEntityOptions = [
    {
      value: "Corporate Meeting Partner B.V.",
      label: "CMP BV",
    },
    {
      value: "Corporate Meeting Partner (UK) Ltd.",
      label: "CMP Ltd",
    },
  ];

  const bookingId = useMemo(
    () => bookingsContext.selectedItem?._id,
    [bookingsContext.selectedItem?._id]
  );

  const checkInDates = useMemo(
    () => stays.map((stay) => stay.checkInDate),
    [stays]
  );

  const checkOutDates = useMemo(
    () => stays.map((stay) => stay.checkOutDate),
    [stays]
  );

  const handleFieldChange = (fieldPath, value, displayValue) => {
    bookingsContext.updateField(fieldPath, value);
  };

  const isFieldChanged = (fieldPath) => {
    return !!bookingsContext.pendingChanges[fieldPath];
  };

  // Calculate and update travel period dates
  const dateUpdateRef = useRef({ start: null, end: null });

  const calculateAndSaveDates = useCallback(() => {
    if (!bookingsContext.selectedItem) return;

    // Calculate earliest check-in
    const validCheckInDates = checkInDates
      .filter((d) => d && !isNaN(new Date(d).getTime()))
      .map((d) => new Date(d));

    const earliestCheckIn =
      validCheckInDates.length > 0
        ? new Date(Math.min(...validCheckInDates.map((d) => d.getTime())))
            .toISOString()
            .split("T")[0]
        : null;

    // Calculate latest check-out
    const validCheckOutDates = checkOutDates
      .filter((d) => d && !isNaN(new Date(d).getTime()))
      .map((d) => new Date(d));

    const latestCheckOut =
      validCheckOutDates.length > 0
        ? new Date(Math.max(...validCheckOutDates.map((d) => d.getTime())))
            .toISOString()
            .split("T")[0]
        : null;

    // Only update if values have actually changed
    const currentEarliest = bookingsContext.selectedItem?.travelPeriodStart;
    const currentLatest = bookingsContext.selectedItem?.travelPeriodEnd;

    // Prevent duplicate updates
    if (
      dateUpdateRef.current.start === earliestCheckIn &&
      dateUpdateRef.current.end === latestCheckOut
    ) {
      return;
    }

    if (currentEarliest !== earliestCheckIn) {
      dateUpdateRef.current.start = earliestCheckIn;
      bookingsContext.updateField("travelPeriodStart", earliestCheckIn);
    }

    if (currentLatest !== latestCheckOut) {
      dateUpdateRef.current.end = latestCheckOut;
      bookingsContext.updateField("travelPeriodEnd", latestCheckOut);
    }
  }, [
    checkInDates,
    checkOutDates,
    bookingsContext.selectedItem?.travelPeriodStart,
    bookingsContext.selectedItem?.travelPeriodEnd,
  ]);

  useEffect(() => {
    console.log("ðŸ”¥ BookingDetails MOUNTED");
    return () => console.log("ðŸ”¥ BookingDetailm UNMOUNTED");
  }, []);
  // Update calculated dates when stays change
  useEffect(() => {
    if (stays.length > 0) {
      calculateAndSaveDates();
    }
  }, [stays, calculateAndSaveDates]);



  // Manual status update when stays change
  useEffect(() => {
    if (stays.length > 0 && bookingsContext.selectedItem?._id) {
      const calculatedStatus = determineBookingStatus(bookingsContext.selectedItem, stays);
      const currentStatus = bookingsContext.selectedItem.status;
      
      if (calculatedStatus !== currentStatus) {
        console.log(`ðŸ”„ Manual status update: ${currentStatus} â†’ ${calculatedStatus}`);
        updateStatus(calculatedStatus);
      }
    }
  }, [stays, bookingsContext.selectedItem, updateStatus]);

  // Show status error if any
  useEffect(() => {
    if (statusError) {
      toast.error(`Status calculation error: ${statusError}`);
    }
  }, [statusError]);

  // Download/send status tracking
  useEffect(() => {
    const downloadButton = document.querySelector(
      ".download-button-container button:first-child"
    );
    const emailButton = document.querySelector(
      ".download-button-container button:nth-child(2)"
    );

    const handleDownloadClick = () => {
      trackerRef.current.downloadClicked = true;
      checkBothActions();
    };
    if (downloadButton) {
      downloadButton.addEventListener("click", handleDownloadClick);
    }

    const handleEmailClick = () => {
      trackerRef.current.emailClicked = true;
      checkBothActions();
    };
    if (emailButton) {
      emailButton.addEventListener("click", handleEmailClick);
    }

    return () => {
      if (downloadButton) {
        downloadButton.removeEventListener("click", handleDownloadClick);
      }
      if (emailButton) {
        emailButton.removeEventListener("click", handleEmailClick);
      }
    };
  }, [bookingId, stays]);

  const checkBothActions = async () => {
    if (trackerRef.current.emailClicked) {
      if (!bookingsContext.selectedItem?.confirmationSent) {
        // Save both confirmationSent and status together to ensure consistency
        const updatedItem = {
          ...bookingsContext.selectedItem,
          confirmationSent: true,
          status: "upcoming_confirmation_sent"
        };
        
        const success = await bookingsContext.updateItem(updatedItem);
        
        if (success) {
          // Update local state to reflect the changes
          bookingsContext.updateField("confirmationSent", true);
          bookingsContext.updateField("status", "upcoming_confirmation_sent");
          toast.success("Confirmation marked as sent");
        } else {
          toast.error("Failed to save confirmation status");
        }
      }
    }
  };

  const handleConfirmationSentChange = async (checked) => {
    // Save both confirmationSent and status together to ensure consistency
    const newStatus = checked ? "upcoming_confirmation_sent" : "upcoming_no_action";
    const updatedItem = {
      ...bookingsContext.selectedItem,
      confirmationSent: checked,
      status: newStatus
    };
    
    const success = await bookingsContext.updateItem(updatedItem);
    
    if (success) {
      // Update local state to reflect the changes
      bookingsContext.updateField("confirmationSent", checked);
      bookingsContext.updateField("status", newStatus);
    } else {
      toast.error("Failed to save confirmation status");
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return "-";
    try {
      return new Date(dateString).toLocaleDateString("en-GB", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });
    } catch (error) {
      return dateString;
    }
  };

  const handleSendConfirmation = (bookerData, preparedStays) => {
    const bookerFirstName = bookerData?.general?.firstName || "";
    const bookerLastName = bookerData?.general?.lastName || "";
    const bookerFullName = `${bookerFirstName} ${bookerLastName}`.trim();

    let subject;
    if (preparedStays && preparedStays.length > 0) {
      const firstStay = preparedStays[0];
      const hotelName = firstStay.hotelName || "the hotel";
      const guestName =
        firstStay.guestNames && firstStay.guestNames.length > 0
          ? firstStay.guestNames[0]
          : "your guest";
      const checkInDate = formatDate(firstStay.checkInDate);
      subject = `Your hotel confirmation: ${
        bookingsContext.selectedItem?.confirmationNo || ""
      }`;
    } else {
      subject = `Booking Confirmation: ${
        bookingsContext.selectedItem?.confirmationNo || ""
      }`;
    }

    let stayDetailsText = "";
    if (preparedStays && preparedStays.length > 0) {
      stayDetailsText = preparedStays
        .map((stay) => {
          const guestNames =
            stay.guestNames && stay.guestNames.length > 0
              ? stay.guestNames.join(", ")
              : "N/A";
          const hotelName = stay.hotelName || "N/A";
          const checkIn = formatDate(stay.checkInDate);
          const checkOut = formatDate(stay.checkOutDate);
          return `Hotel: ${hotelName}, Guest: ${guestNames}, Check-in date: ${checkIn}, Check-out date: ${checkOut}`;
        })
        .join("\n");
    }

    const bodyContent = `Dear ${bookerFullName},\n\nThank you for making your reservation with us. Please find attached your booking confirmation for the following details:\n\n${stayDetailsText}\n\nShould you have any questions or need to make any changes, please do not hesitate to contact us directly.\n\nWe hope you and/or your guest(s) have a pleasant stay.`;

    navigator.clipboard.writeText(bodyContent).then(
      () => {
        toast.success(
          "Email content copied to clipboard. Please paste it into your new email."
        );
      },
      (err) => {
        toast.error("Could not copy email content to clipboard.");
        console.error("Could not copy text: ", err);
      }
    );

    const bccEmail = "donotreply@corporatemeetingpartner.com";
    const mailtoUrl = `mailto:${
      bookerData?.general?.email || ""
    }?subject=${encodeURIComponent(subject)}&bcc=${bccEmail}`;

    window.open(mailtoUrl, "_blank");
    trackerRef.current.emailClicked = true;
    checkBothActions();
  };

  return (
    <>
      <div className="col-half">
        <AutoGeneratedField
          label="Booking reference"
          fieldPath="confirmationNo"
          value={bookingsContext.selectedItem?.confirmationNo || ""}
          updateField={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          isChanged={isFieldChanged("confirmationNo")}
          allowRefresh={true}
        />
        <TextField
          label="Confirmation Date"
          fieldPath="confirmationDate"
          value={
            bookingsContext.selectedItem?.confirmationDate ||
            new Date().toISOString().split("T")[0]
          }
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          type="date"
          isChanged={isFieldChanged("confirmationDate")}
        />
        <RefField
          label="Booker"
          fieldPath="bookerId"
          value={bookingsContext.selectedItem?.bookerId || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          collectionName="contacts"
          displayFields={["general.firstName", "general.lastName"]}
          displaySeparator=" "
          isChanged={isFieldChanged("bookerId")}
          setFieldLoading={bookingsContext.setFieldLoading}
          key={`booker-${bookingId}`}
          nameFieldPath="bookerName"
          nameFields={["general.firstName", "general.lastName"]}
        />
        <TextField
          label="Cost Centre"
          fieldPath="costCentre"
          value={bookingsContext.selectedItem?.costCentre || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          isChanged={isFieldChanged("costCentre")}
        />
        <CalculatedDateField
          label="Earliest check in"
          dates={checkInDates}
          mode="earliest"
        />
        <CalculatedDateField
          label="Latest check out"
          dates={checkOutDates}
          mode="latest"
        />
      </div>
      <div className="col-half">
        <RefField
          label="Company"
          fieldPath="companyId"
          value={bookingsContext.selectedItem?.companyId || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          collectionName="companies"
          displayFields={["name"]}
          isChanged={isFieldChanged("companyId")}
          setFieldLoading={bookingsContext.setFieldLoading}
          displaySeparator="<br>"
          key={`company-${bookingId}`}
          nameFieldPath="companyName"
        />
        <TextField
          label="Sales invoice"
          fieldPath="salesInvoice"
          value={bookingsContext.selectedItem?.salesInvoice || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          isChanged={isFieldChanged("salesInvoice")}
        />
        <TextField
          label="Notes"
          fieldPath="notes"
          value={bookingsContext.selectedItem?.notes || ""}
          onChange={handleFieldChange}
          isEditing={bookingsContext.isEditing}
          multiline={true}
          rows={4}
          isChanged={isFieldChanged("notes")}
        />
        <DropdownField
          label="Confirmation entity"
          fieldPath="confirmationEntity"
          value={
            bookingsContext.selectedItem?.confirmationEntity ||
            "Corporate Meeting Partner B.V."
          }
          onChange={handleFieldChange}
          options={confirmationEntityOptions}
          isEditing={bookingsContext.isEditing}
          isChanged={isFieldChanged("confirmationEntity")}
        />
        <DownloadPDFButton
          bookingData={bookingsContext.selectedItem}
          stays={stays}
          disabled={bookingsContext.isEditing}
          onSendConfirmation={handleSendConfirmation}
        />
        <div className="checkbox-field">
          <input
            type="checkbox"
            id="confirmationSent"
            checked={bookingsContext.selectedItem?.confirmationSent || false}
            onChange={(e) => handleConfirmationSentChange(e.target.checked)}
            disabled={!bookingsContext.isEditing}
          />
          <label htmlFor="confirmationSent" className="checkbox-label">
            Confirmation sent
          </label>
          {isFieldChanged("confirmationSent") && (
            <div className="field-changed-indicator"></div>
          )}
        </div>
      </div>
    </>
  );
}
