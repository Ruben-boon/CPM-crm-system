// Updated StayCard.jsx with detailed formatGuestNames implementation

"use client";
import { useState } from "react";
import { Edit, ExternalLink, Copy, X } from "lucide-react";
import Button from "@/components/common/Button";
import { updateDocument } from "@/app/actions/crudActions";
import { toast } from "sonner";
import {
  STAY_STATUS_OPTIONS,
  PREPAID_OPTIONS,
  formatDate,
  getStatusLabel,
} from "./bookingConstants";
import { formatConfirmationNumber } from "../fields/AutoGeneratedField";

export function StayCard({
  stay,
  isEditing,
  isLoading = false,
  onEditStay,
  onCopyStay,
  onViewStay,
  onRemoveStay,
}) {
  const [stayUpdate, setStayUpdate] = useState({
    status: stay?.status || "unconfirmed",
    prepaid: stay?.prepaid || "no",
    prepaidDetails: stay?.prepaidDetails || "",
    purchaseInvoice: stay?.purchaseInvoice || "",
    commissionInvoice: stay?.commissionInvoice || "",
    hotelConfirmationNo: stay?.hotelConfirmationNo || "",
  });
  const [savingFields, setSavingFields] = useState({});

  if (isLoading || !stay) {
    return <StayCardSkeleton />;
  }

  // UPDATED: Enhanced formatGuestNames function with detailed logic
  const formatGuestNames = (stay) => {
    /*
     * Priority order for displaying guest information:
     * 1. summaryGuestNames - Guest names from booking's staySummaries (most current)
     * 2. guestNames - Guest names stored directly on the stay
     * 3. guestIds - Guest IDs array (show count)
     * 4. Fallback - "No guests assigned"
     */
    
    // First Priority: Check for guest names from booking summary
    // This comes from the enhanced loadRelatedStays function
    if (stay.summaryGuestNames && Array.isArray(stay.summaryGuestNames) && stay.summaryGuestNames.length > 0) {
      return stay.summaryGuestNames.join(", ");
    }
    
    // Second Priority: Check for guest names stored on the stay itself
    // This might be from the stay's own guestNames field if it exists
    if (stay.guestNames && Array.isArray(stay.guestNames) && stay.guestNames.length > 0) {
      return stay.guestNames.join(", ");
    }
    
    // Third Priority: Count guest IDs if we have them but no names
    // This gives users an indication of how many guests even without names
    if (stay.guestIds && Array.isArray(stay.guestIds) && stay.guestIds.length > 0) {
      const count = stay.guestIds.length;
      return count === 1 ? "1 guest" : `${count} guests`;
    }
    
    // Final Fallback: No guest information available
    return "No guests assigned";
  };

  // UPDATED: Enhanced getGuestCountText that uses the same logic
  const getGuestCountText = (stay) => {
    // Use the same formatGuestNames logic for consistency
    return formatGuestNames(stay);
  };

  const handleStayFieldChange = (field, value) => {
    setStayUpdate((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleAutoSave = async (fieldPath, value) => {
    if (value !== stay[fieldPath]) {
      setSavingFields((prev) => ({ ...prev, [fieldPath]: true }));

      try {
        const updatedStay = {
          ...stay,
          ...stayUpdate,
        };

        const result = await updateDocument("stays", stay._id, updatedStay);
        const fieldLabel = fieldPath
          .replace(/([A-Z])/g, " $1")
          .replace(/^./, (str) => str.toUpperCase());

        if (result.success) {
          toast.success(`${fieldLabel} updated`);
        } else {
          toast.error(
            `Failed to update ${fieldLabel.toLowerCase()}: ${
              result.error || "Unknown error"
            }`
          );
        }
      } catch (error) {
        console.error(`Error updating stay field ${fieldPath}:`, error);
        const fieldLabel = fieldPath.replace(/([A-Z])/g, " $1").toLowerCase();
        toast.error(`Failed to update ${fieldLabel}`);
      } finally {
        setSavingFields((prev) => ({ ...prev, [fieldPath]: false }));
      }
    }
  };

  const handleViewClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    onViewStay(stay._id);
  };

  const handleEditClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    onEditStay(stay);
  };

  const handleCopyClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    onCopyStay(stay);
  };

  const handleRemoveClick = (e) => {
    e.preventDefault();
    e.stopPropagation();
    onRemoveStay(stay._id);
  };

  const stayConfirmationNo = stay.confirmationNo
    ? formatConfirmationNumber(stay.confirmationNo, "stay")
    : null;

  return (
    <div className="stay-item">
      <div className="stay-info">
        <div className="stay-header">
          <div className="stay-hotel">{stay.hotelName}</div>
        </div>
        
        <div className="group-row">
          <div className="stay-dates">
            {formatDate(stay.checkInDate)} - {formatDate(stay.checkOutDate)}
          </div>
          
          {/* UPDATED: Using the enhanced formatGuestNames function */}
          <div className="stay-guests">
            {(() => {
              const guestDisplay = formatGuestNames(stay);
              const isGuestCount = guestDisplay.includes("guest") && !guestDisplay.includes(",");
              
              return (
                <span className={isGuestCount ? "guest-count" : "guest-names"}>
                  {guestDisplay}
                </span>
              );
            })()}
          </div>
          
          <div className="stay-details">
            <div>
              {stay.roomCurrency} {stay.roomPrice}
            </div>
          </div>
        </div>

        {isEditing && (
          <div className="stay-quick-edit">
            <div
              className={`form-field ${
                savingFields.hotelConfirmationNo ? "field-saving" : ""
              }`}
            >
              <label className="field-label">Hotel Confirmation No.</label>
              <input
                type="text"
                value={stayUpdate.hotelConfirmationNo}
                onChange={(e) =>
                  handleStayFieldChange("hotelConfirmationNo", e.target.value)
                }
                onBlur={() =>
                  handleAutoSave(
                    "hotelConfirmationNo",
                    stayUpdate.hotelConfirmationNo
                  )
                }
                onKeyDown={(e) => {
                  if (e.key === "Enter") {
                    e.preventDefault();
                    handleAutoSave(
                      "hotelConfirmationNo",
                      stayUpdate.hotelConfirmationNo
                    );
                  }
                }}
                className="input-base"
                disabled={savingFields.hotelConfirmationNo}
                placeholder="Enter hotel confirmation..."
              />
              {savingFields.hotelConfirmationNo && (
                <div className="save-indicator">Saving...</div>
              )}
            </div>

            <div
              className={`form-field ${
                savingFields.purchaseInvoice ? "field-saving" : ""
              }`}
            >
              <label className="field-label">Purchase Invoice</label>
              <input
                type="text"
                value={stayUpdate.purchaseInvoice}
                onChange={(e) =>
                  handleStayFieldChange("purchaseInvoice", e.target.value)
                }
                onBlur={() =>
                  handleAutoSave("purchaseInvoice", stayUpdate.purchaseInvoice)
                }
                onKeyDown={(e) => {
                  if (e.key === "Enter") {
                    e.preventDefault();
                    handleAutoSave(
                      "purchaseInvoice",
                      stayUpdate.purchaseInvoice
                    );
                  }
                }}
                className="input-base"
                disabled={savingFields.purchaseInvoice}
                placeholder="Enter invoice number..."
              />
              {savingFields.purchaseInvoice && (
                <div className="save-indicator">Saving...</div>
              )}
            </div>

            <div
              className={`form-field ${
                savingFields.commissionInvoice ? "field-saving" : ""
              }`}
            >
              <label className="field-label">Commission Invoice</label>
              <input
                type="text"
                value={stayUpdate.commissionInvoice}
                onChange={(e) =>
                  handleStayFieldChange("commissionInvoice", e.target.value)
                }
                onBlur={() =>
                  handleAutoSave(
                    "commissionInvoice",
                    stayUpdate.commissionInvoice
                  )
                }
                onKeyDown={(e) => {
                  if (e.key === "Enter") {
                    e.preventDefault();
                    handleAutoSave(
                      "commissionInvoice",
                      stayUpdate.commissionInvoice
                    );
                  }
                }}
                className="input-base"
                disabled={savingFields.commissionInvoice}
                placeholder="Enter invoice number..."
              />
              {savingFields.commissionInvoice && (
                <div className="save-indicator">Saving...</div>
              )}
            </div>
          </div>
        )}
      </div>
      
      <div className="stay-actions">
        <div className="edit-button-group">
          {isEditing ? (
            <>
              <Button
                icon={X}
                onClick={handleRemoveClick}
                size="sm"
                className="button--danger"
                intent="outline"
                title="Remove stay from booking"
                type="button"
              >
                Remove
              </Button>
              <Button
                icon={Copy}
                onClick={handleCopyClick}
                size="sm"
                intent="outline"
                title="Copy stay"
                type="button"
              ></Button>
              <Button
                icon={Edit}
                onClick={handleEditClick}
                size="sm"
                intent="outline"
                title="Edit stay"
                type="button"
              >
                Edit
              </Button>
            </>
          ) : (
            <Button
              icon={ExternalLink}
              onClick={handleViewClick}
              size="sm"
              intent="ghost"
              title="View stay details"
              type="button"
            >
              View
            </Button>
          )}
        </div>
      </div>

      <style jsx>{`
        .save-indicator {
          position: absolute;
          right: 8px;
          top: 50%;
          transform: translateY(-50%);
          font-size: 12px;
          color: #6b7280;
          background-color: white;
          padding: 0 4px;
        }

        .field-saving input {
          background-color: #f9fafb;
        }

        .form-field {
          position: relative;
          margin-bottom: 8px;
        }

        /* New styles for guest display */
        .guest-names {
          color: #374151;
          font-weight: 500;
        }

        .guest-count {
          color: #6b7280;
          font-style: italic;
        }

        .stay-guests {
          min-width: 0; /* Allows text to wrap if needed */
          flex: 1;
        }
      `}</style>
    </div>
  );
}

function StayCardSkeleton() {
  return (
    <div className="stay-skeleton">
      <div className="stay-skeleton-header">
        <div className="skeleton-bar skeleton-title"></div>
        <div className="skeleton-bar skeleton-badge"></div>
      </div>
    </div>
  );
}