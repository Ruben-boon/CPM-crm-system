"use client";
import { useState } from "react";
import { Edit, ExternalLink, Copy, X } from "lucide-react";
import Button from "@/components/common/Button";
import { updateDocument } from "@/app/actions/crudActions";
import { toast } from "sonner";
import {
  STAY_STATUS_OPTIONS,
  PREPAID_OPTIONS,
  formatDate,
  getGuestCountText,
  getStatusLabel,
} from "./bookingConstants";
import { formatConfirmationNumber } from "../fields/AutoGeneratedField";

// Skeleton loader for a single stay card (to use when stay data is loading)
export function StayCardSkeleton() {
  return (
    <div className="stay-item skeleton-container">
      <div className="skeleton-info">
        <div className="skeleton-line skeleton-title"></div>
        <div className="skeleton-line skeleton-subtitle"></div>

      </div>
      <div className="skeleton-actions">
        <div className="skeleton-button"></div>
      </div>
      
      <style jsx>{`
        .skeleton-container {
          animation: pulse 1.5s infinite alternate;
        }
        
        .skeleton-info {
          flex: 1;
          display: flex;
          flex-direction: column;
          gap: 8px;
        }
        
        .skeleton-line {
          height: 16px;
          background-color: #e5e7eb;
          border-radius: 4px;
        }
        
        .skeleton-title {
          width: 60%;
        }
        
        .skeleton-subtitle {
          width: 40%;
        }
        
        .skeleton-text {
          width: 80%;
        }
        
        .skeleton-actions {
          display: flex;
          justify-content: flex-end;
          align-items: center;
        }
        
        .skeleton-button {
          width: 80px;
          height: 32px;
          background-color: #e5e7eb;
          border-radius: 4px;
        }
        
        @keyframes pulse {
          0% {
            opacity: 0.6;
          }
          100% {
            opacity: 1;
          }
        }
      `}</style>
    </div>
  );
}

export function StayCard({
  stay,
  index,
  isEditing,
  isLoading = false,
  onEditStay,
  onCopyStay,
  onViewStay,
  onRemoveStay,
}) {
  const [stayUpdate, setStayUpdate] = useState({
    status: stay?.status || "unconfirmed",
    prepaid: stay?.prepaid || "no",
    prepaidDetails: stay?.prepaidDetails || "",
    purchaseInvoice: stay?.purchaseInvoice || "",
  });
  const [isSaving, setIsSaving] = useState(false);

  // If stay is loading or missing, show the skeleton
  if (isLoading || !stay) {
    return <StayCardSkeleton />;
  }

  // Handle field changes for stay updates
  const handleStayFieldChange = (field, value) => {
    setStayUpdate((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  // Auto-save when field loses focus or Enter is pressed
  const handleAutoSave = async (fieldPath, value) => {
    // Only save if the value has changed
    if (value !== stay.purchaseInvoice) {
      setIsSaving(true);

      try {
        // Create updated stay with the changed field
        const updatedStay = {
          ...stay,
          purchaseInvoice: value
        };

        const result = await updateDocument("stays", stay._id, updatedStay);

        if (result.success) {
          toast.success("Purchase invoice updated");
        } else {
          toast.error(
            `Failed to update purchase invoice: ${result.error || "Unknown error"}`
          );
        }
      } catch (error) {
        console.error("Error updating stay:", error);
        toast.error("Failed to update purchase invoice");
      } finally {
        setIsSaving(false);
      }
    }
  };

  const stayConfirmationNo = stay.confirmationNo
    ? formatConfirmationNumber(stay.confirmationNo, "stay")
    : null;

  return (
    <div className="stay-item">
      <div className="stay-info">
        <div className="stay-header">
          <div className="stay-hotel">{stay.hotelName}</div>
          {stayConfirmationNo && (
            <div className="stay-confirmation-no">{stayConfirmationNo}</div>
          )}
        </div>
        <div className="group-row">
          <div className="stay-dates">
            {formatDate(stay.checkInDate)} - {formatDate(stay.checkOutDate)}
          </div>
          <div className="stay-guests">
            {getGuestCountText(stay.guestIds) ? (
              <span>{getGuestCountText(stay.guestIds)}</span>
            ) : (
              <span className="no-guests">No guests assigned</span>
            )}
          </div>
          <div className="stay-details">
            <div>
              {stay.roomCurrency} {stay.roomPrice}
            </div>
          </div>
        </div>

        {/* Add quick fields when in edit mode */}
        {isEditing && (
          <div className="stay-quick-edit">
            {/* Purchase Invoice field with auto-save functionality */}
            <div className={`form-field ${isSaving ? 'field-saving' : ''}`}>
              <label className="field-label">Purchase Invoice</label>
              <input
                type="text"
                value={stayUpdate.purchaseInvoice}
                onChange={(e) => handleStayFieldChange("purchaseInvoice", e.target.value)}
                onBlur={() => handleAutoSave("purchaseInvoice", stayUpdate.purchaseInvoice)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    handleAutoSave("purchaseInvoice", stayUpdate.purchaseInvoice);
                  }
                }}
                className="input-base"
                disabled={isSaving}
                placeholder="Enter invoice number..."
              />
              {isSaving && <div className="save-indicator">Saving...</div>}
            </div>
          </div>
        )}
      </div>
      <div className="stay-actions">
        <div className="edit-button-group">
          {isEditing ? (
            <>
              <Button
                icon={X}
                onClick={() => onRemoveStay(stay, index)}
                size="sm"
                className="button--danger"
                intent="outline"
                title="Remove stay from booking"
              >
                Remove
              </Button>
              <Button
                icon={Copy}
                onClick={() => onCopyStay(stay)}
                size="sm"
                intent="outline"
                title="Copy stay"
              ></Button>
              <Button
                icon={Edit}
                onClick={() => onEditStay(stay)}
                size="sm"
                intent="outline"
                title="Edit stay"
              >
                Edit
              </Button>
            </>
          ) : (
            // In non-edit mode, just show the "View" button
            <Button
              icon={ExternalLink}
              onClick={() => onViewStay(stay._id)}
              size="sm"
              intent="ghost"
              title="View stay details"
            >
              View
            </Button>
          )}
        </div>
      </div>

      <style jsx>{`
        .save-indicator {
          position: absolute;
          right: 8px;
          top: 50%;
          transform: translateY(-50%);
          font-size: 12px;
          color: #6b7280;
          background-color: white;
          padding: 0 4px;
        }
        
        .field-saving input {
          background-color: #f9fafb;
        }
        
        .form-field {
          position: relative;
          margin-bottom: 8px;
        }
      `}</style>
    </div>
  );
}