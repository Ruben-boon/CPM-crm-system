"use client";
import { useState, useEffect, useRef } from "react";
import { useBookingsData } from "@/context/DataContext";
import { CommonForm } from "../common/CommonForm";
import { BookingDetails } from "./BookingDetails";
import { StaysList } from "./StaysList";
import { StayModal } from "../stay/StayModal";
import { searchDocuments } from "@/app/actions/crudActions";
import { toast } from "sonner";
import { BOOKING_STATUS_OPTIONS } from "./bookingConstants";
import { getStatusLabel } from "./bookingStatusUtils";
import { formatConfirmationNumber } from "../fields/AutoGeneratedField";


export function BookingForm() {
  const bookingsContext = useBookingsData();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedStay, setSelectedStay] = useState(null);
  const [isCopyMode, setIsCopyMode] = useState(false);
  const [stays, setStays] = useState([]);
  const [loadingStays, setLoadingStays] = useState(false);
  const loadingRef = useRef(false); // Prevent concurrent stay loads

  const getDisplayName = (item) => {
    return item.confirmationNo
      ? formatConfirmationNumber(item.confirmationNo)
      : "New Booking";
  };

  useEffect(() => {
    // Modify top bar title to show confirmation number and status badge
    if (bookingsContext.selectedItem) {
      // Small delay to ensure the DOM is ready
      setTimeout(() => {
        const topBarTitle = document.querySelector(".top-bar__title");
        if (topBarTitle) {
          // Clear existing content
          topBarTitle.innerHTML = "";

          // Create and append confirmation number
          const confirmationSpan = document.createElement("span");
          const confirmationText = bookingsContext.selectedItem.confirmationNo
            ? formatConfirmationNumber(
                bookingsContext.selectedItem.confirmationNo
              )
            : "New Booking";
          confirmationSpan.textContent = confirmationText;
          topBarTitle.appendChild(confirmationSpan);

          // Create and append status badge if status exists
          if (bookingsContext.selectedItem.status) {
            const statusBadge = document.createElement("span");
            statusBadge.className = `status-badge status-${bookingsContext.selectedItem.status}`;
            statusBadge.textContent = getStatusLabel(
              bookingsContext.selectedItem.status,
              BOOKING_STATUS_OPTIONS
            );
            topBarTitle.appendChild(statusBadge);
          }
        }
      }, 100);
    }
  }, [
    bookingsContext.selectedItem,
    bookingsContext.selectedItem?.status,
    bookingsContext.selectedItem?.confirmationNo,
  ]);

  // Load related stays when booking ID changes
  useEffect(() => {
    // Clear stays when booking ID changes
    if (bookingsContext.selectedItem?._id) {
      setStays([]);
      loadRelatedStays(bookingsContext.selectedItem._id);
    } else {
      setStays([]);
    }
  }, [bookingsContext.selectedItem?._id]);

  const loadRelatedStays = async (bookingId) => {
    if (!bookingId || loadingRef.current) return;

    try {
      loadingRef.current = true;
      setLoadingStays(true);

      // Get stayIds directly from the current booking context
      const stayIds = bookingsContext.selectedItem?.stayIds || []; //

      if (stayIds.length === 0) {
        setStays([]);
        return;
      }

      // Load all stays at once with a single batch of promises
      const stayPromises = stayIds.map((stayId) =>
        searchDocuments("stays", stayId, "_id") //
      );

      const stayResults = await Promise.all(stayPromises); //

      const loadedStays = stayResults
        .filter((result) => Array.isArray(result) && result.length > 0)
        .map((result) => result[0]);

      setStays(loadedStays);

      // --- MODIFIED START ---
      // Create the summary array from the loaded stays
      const staySummaries = loadedStays.map((stay) => ({
        stayId: stay._id,
        hotelName: stay.hotelName || "Unknown Hotel",
        checkInDate: stay.checkInDate,
        checkOutDate: stay.checkOutDate,
      }));
      bookingsContext.updateField("staySummaries", staySummaries);
      // --- MODIFIED END ---
    } catch (err) {
      console.error("Error loading related stays:", err);
      toast.error("Failed to load stays");
    } finally {
      loadingRef.current = false;
      setLoadingStays(false);
    }
  };

  const handleAddStay = (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    const newStay = {
      checkInDate: bookingsContext.selectedItem?.travelPeriodStart || "", //
      checkOutDate: bookingsContext.selectedItem?.travelPeriodEnd || "", //
      status: "unconfirmed", //
      prepaid: "no", //
    };

    setSelectedStay(newStay);
    setIsCopyMode(false);
    setIsModalOpen(true);
  };

  const handleEditStay = (stay) => {
    setSelectedStay(stay);
    setIsCopyMode(false);
    setIsModalOpen(true);
  };

  const handleCopyStay = (stay) => {
    // Create a deep copy of the stay
    const stayCopy = JSON.parse(JSON.stringify(stay));

    // Remove the _id to ensure it creates a new stay
    delete stayCopy._id;

    // Modify the reference to indicate it's a copy
    if (stayCopy.reference) {
      stayCopy.reference = `${stayCopy.reference} (Copy)`;
    }

    setSelectedStay(stayCopy);
    setIsCopyMode(true);
    setIsModalOpen(true);
  };

  const handleViewStay = (stayId) => {
    // Find the stay in our current stays array
    const stayToView = stays.find((stay) => stay._id === stayId);

    if (stayToView) {
      // Set the stay data for the modal
      setSelectedStay(stayToView);
      setIsCopyMode(false);
      setIsModalOpen(true);
    } else {
      // If for some reason we can't find the stay in our current data,
      // fetch it from the database
      const fetchStay = async () => {
        try {
          const result = await searchDocuments("stays", stayId, "_id"); //
          if (Array.isArray(result) && result.length > 0) {
            setSelectedStay(result[0]);
            setIsCopyMode(false);
            setIsModalOpen(true);
          } else {
            toast.error("Could not find stay details");
          }
        } catch (error) {
          console.error("Error fetching stay details:", error);
          toast.error("Error loading stay details");
        }
      };

      fetchStay();
    }
  };

  const handleRemoveStay = (stayIdToRemove) => {
    if (
      confirm(
        `Are you sure you want to remove this stay from the booking? This will not delete the stay itself.`
      )
    ) {
      // Use filter to correctly remove the stay by its unique ID
      const newStayIds = (bookingsContext.selectedItem.stayIds || []).filter( //
        (id) => id !== stayIdToRemove
      );
      const newStays = stays.filter((stay) => stay._id !== stayIdToRemove); //

      // --- MODIFIED START ---
      // Re-create the summary array from the updated list of stays
      const newSummaries = newStays.map((stay) => ({
        stayId: stay._id,
        hotelName: stay.hotelName || "Unknown Hotel",
        checkInDate: stay.checkInDate,
        checkOutDate: stay.checkOutDate,
      }));
      // --- MODIFIED END ---

      // Update the form context with the new array of IDs
      bookingsContext.updateField("stayIds", newStayIds); //
      bookingsContext.updateField("staySummaries", newSummaries);
      // Update the local stays state for immediate UI feedback
      setStays(newStays);
      
      // Also update the main booking to trigger the autosave
      const updatedBooking = {
        ...bookingsContext.selectedItem,
        stayIds: newStayIds,
        staySummaries: newSummaries,
      };
      bookingsContext.updateItem(updatedBooking); //


      toast.success("Stay removed and booking saved.");
    }
  };

  const handleStaySaved = async (savedStay) => {
    if (!savedStay || !savedStay._id) {
      return; 
    }

    // Create an updated list of stays to work from
    const existingStayIndex = stays.findIndex(
      (stay) => stay._id === savedStay._id
    );
    const newStaysList = [...stays];

    // Check if this is a new stay or an update
    const isNewStay =
      (bookingsContext.selectedItem.stayIds?.indexOf(savedStay._id) ?? -1) === -1; //
    let newStayIds;

    if (isNewStay) {
      // This is a new stay - add it to our arrays
      newStayIds = [
        ...(bookingsContext.selectedItem.stayIds || []), //
        savedStay._id,
      ];

      bookingsContext.updateField("stayIds", newStayIds); //
      newStaysList.push(savedStay);
      setStays(newStaysList);

      // --- MODIFIED START ---
      // Create the new summary array
      const newSummaries = newStaysList.map((stay) => ({
        stayId: stay._id,
        hotelName: stay.hotelName || "Unknown Hotel",
        checkInDate: stay.checkInDate,
        checkOutDate: stay.checkOutDate,
      }));
      // --- MODIFIED END ---
      bookingsContext.updateField("staySummaries", newSummaries);

      // Auto-save the booking to database with the new stay ID
      if (bookingsContext.selectedItem._id) {
        const updatedBooking = {
          ...bookingsContext.selectedItem,
          stayIds: newStayIds,
          staySummaries: newSummaries,
        };

        const saveSuccess = await bookingsContext.updateItem(updatedBooking); //

        if (saveSuccess) {
          toast.success("Stay added and booking updated", {
            description: "The stay has been created and linked to this booking",
          });
        } else {
          toast.warning("Stay created but booking not updated", {
            description: "Please save the booking to confirm changes",
          });
        }
      }
    } else {
      // This is an existing stay that's been updated
      newStayIds = [...bookingsContext.selectedItem.stayIds]; //

      newStaysList[existingStayIndex] = savedStay;
      setStays(newStaysList);

      // --- MODIFIED START ---
      // Re-create the summary array to catch potential hotel name or date changes
      const updatedSummaries = newStaysList.map((stay) => ({
        stayId: stay._id,
        hotelName: stay.hotelName || "Unknown Hotel",
        checkInDate: stay.checkInDate,
        checkOutDate: stay.checkOutDate,
      }));
      // --- MODIFIED END ---
      bookingsContext.updateField("staySummaries", updatedSummaries);
      toast.success("Stay updated successfully");
    }

    // Close the modal
    setIsModalOpen(false);
  };

  return (
    <>
      {isModalOpen && (
        <StayModal
          stay={selectedStay}
          isCopyMode={isCopyMode}
          bookingId={bookingsContext.selectedItem?._id}
          onSave={handleStaySaved}
          onClose={() => setIsModalOpen(false)}
        />
      )}

      <CommonForm
        dataContext={bookingsContext}
        itemName="Booking"
        entityType="booking"
        basePath="bookings"
        displayName={getDisplayName}
      >
        <BookingDetails bookingsContext={bookingsContext} stays={stays} />
        <div className="col-full">
            <StaysList
              bookingsContext={bookingsContext}
              stays={stays}
              isLoading={loadingStays}
              onAddStay={handleAddStay}
              onEditStay={handleEditStay}
              onCopyStay={handleCopyStay}
              onViewStay={handleViewStay}
              onRemoveStay={handleRemoveStay}
            />
        </div>
      </CommonForm>

      {/* Include CSS for status badge styling */}
      <style jsx global>{`
        /* Custom style to modify the top bar title */
        .top-bar__title {
          display: flex !important;
          align-items: center !important;
          gap: 12px !important;
          span {
            font-size: 1rem;
          }
        }

        /* Status colors */
        .status-upcoming_no_action {
          background-color: #8b5cf6; /* Purple */
        }

        .status-upcoming_confirmation_sent {
          background-color: #3b82f6; /* Blue */
        }

        .status-stayed_missing_invoice {
          background-color: #f59e0b; /* Amber */
        }

        .status-invoicing_missing_both {
          background-color: #ef4444; /* Red */
        }

        .status-invoicing_missing_sales {
          background-color: #f97316; /* Orange */
        }

        .status-invoicing_missing_commission {
          background-color: #f97316; /* Orange */
        }

        .status-completed {
          background-color: #10b981; /* Green */
        }
      `}</style>
    </>
  );
}