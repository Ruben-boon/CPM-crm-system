"use client";
import { useState, useEffect, useRef } from "react";
import { useBookingsData } from "@/context/DataContext";
import { CommonForm } from "../common/CommonForm";
import { BookingDetails } from "./BookingDetails";
import { StaysList } from "./StaysList";
import { StayModal } from "../stay/StayModal";
import { searchDocuments } from "@/app/actions/crudActions";
import { toast } from "sonner";
import { BOOKING_STATUS_OPTIONS } from "./bookingConstants";
import { getStatusLabel } from "./bookingStatusUtils";
import { formatConfirmationNumber } from "../fields/AutoGeneratedField";

export function BookingForm() {
  const bookingsContext = useBookingsData();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedStay, setSelectedStay] = useState(null);
  const [isCopyMode, setIsCopyMode] = useState(false);
  const [stays, setStays] = useState([]);
  const previousStayIdsRef = useRef([]); // For tracking changes to stayIds

  const getDisplayName = (item) => {
    return item.confirmationNo 
      ? formatConfirmationNumber(item.confirmationNo) 
      : "New Booking";
  };

  useEffect(() => {
    // Modify top bar title to show confirmation number and status badge
    if (bookingsContext.selectedItem) {
      // Small delay to ensure the DOM is ready
      setTimeout(() => {
        const topBarTitle = document.querySelector(".top-bar__title");
        if (topBarTitle) {
          // Clear existing content
          topBarTitle.innerHTML = "";

          // Create and append confirmation number
          const confirmationSpan = document.createElement("span");
          const confirmationText = bookingsContext.selectedItem.confirmationNo 
            ? formatConfirmationNumber(bookingsContext.selectedItem.confirmationNo)
            : "New Booking";
          confirmationSpan.textContent = confirmationText;
          topBarTitle.appendChild(confirmationSpan);

          // Create and append status badge if status exists
          if (bookingsContext.selectedItem.status) {
            const statusBadge = document.createElement("span");
            statusBadge.className = `status-badge status-${bookingsContext.selectedItem.status}`;
            statusBadge.textContent = getStatusLabel(
              bookingsContext.selectedItem.status,
              BOOKING_STATUS_OPTIONS
            );
            topBarTitle.appendChild(statusBadge);
          }
        }
      }, 100);
    }
  }, [
    bookingsContext.selectedItem,
    bookingsContext.selectedItem?.status,
    bookingsContext.selectedItem?.confirmationNo,
  ]);

  // Improved effect to load related stays only when stayIds actually change
  useEffect(() => {
    const currentStayIds = bookingsContext.selectedItem?.stayIds || [];
    const previousStayIds = previousStayIdsRef.current;

    // Check if the arrays are different (different length or content)
    const haveStayIdsChanged =
      currentStayIds.length !== previousStayIds.length ||
      currentStayIds.some((id, index) => id !== previousStayIds[index]);

    // Only reload stays if there's an actual change to stayIds
    if (
      bookingsContext.selectedItem?._id &&
      currentStayIds.length > 0 &&
      haveStayIdsChanged
    ) {
      loadRelatedStays(currentStayIds);
      // Update the reference to current stayIds
      previousStayIdsRef.current = [...currentStayIds];
    } else if (currentStayIds.length === 0 && previousStayIds.length > 0) {
      // Clear stays if stayIds was cleared
      setStays([]);
      previousStayIdsRef.current = [];
    }
  }, [
    bookingsContext.selectedItem?._id,
    bookingsContext.selectedItem?.stayIds,
  ]);

  const loadRelatedStays = async (stayIds) => {
    if (!stayIds || stayIds.length === 0) {
      setStays([]);
      return;
    }

    try {
      const loadedStays = [];

      // Fetch each stay by ID
      for (const stayId of stayIds) {
        const result = await searchDocuments("stays", stayId, "_id");
        if (Array.isArray(result) && result.length > 0) {
          loadedStays.push(result[0]);
        }
      }

      setStays(loadedStays);
    } catch (err) {
      console.error("Error loading related stays:", err);
      toast.error("Failed to load stays");
    }
  };

  const handleAddStay = (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    const newStay = {
      checkInDate: bookingsContext.selectedItem?.travelPeriodStart || "",
      checkOutDate: bookingsContext.selectedItem?.travelPeriodEnd || "",
      status: "unconfirmed",
      prepaid: "no",
    };

    setSelectedStay(newStay);
    setIsCopyMode(false);
    setIsModalOpen(true);
  };

  const handleEditStay = (stay) => {
    setSelectedStay(stay);
    setIsCopyMode(false);
    setIsModalOpen(true);
  };

  const handleCopyStay = (stay) => {
    // Create a deep copy of the stay
    const stayCopy = JSON.parse(JSON.stringify(stay));

    // Remove the _id to ensure it creates a new stay
    delete stayCopy._id;

    // Modify the reference to indicate it's a copy
    if (stayCopy.reference) {
      stayCopy.reference = `${stayCopy.reference} (Copy)`;
    }

    setSelectedStay(stayCopy);
    setIsCopyMode(true);
    setIsModalOpen(true);
  };

  const handleViewStay = (stayId) => {
    window.open(`/stays/${stayId}`, "_blank");
  };

  const handleRemoveStay = (stay, index) => {
    // Ask for confirmation before removing
    if (
      confirm(
        `Are you sure you want to remove this stay from the booking? This will not delete the stay itself.`
      )
    ) {
      // Create new arrays without the removed stay
      const newStayIds = [...bookingsContext.selectedItem.stayIds];
      newStayIds.splice(index, 1);

      const newStays = [...stays];
      newStays.splice(index, 1);

      // Update the form data
      bookingsContext.updateField("stayIds", newStayIds);

      // Update the stays list locally for immediate UI feedback
      setStays(newStays);

      // Update our reference to prevent unnecessary reloading
      previousStayIdsRef.current = [...newStayIds];

      // Show success message
      toast.success("Stay removed from booking");
    }
  };

  const handleStaySaved = (savedStay) => {
    if (!savedStay || !savedStay._id) {
      return; // Something went wrong with saving
    }

    // Check if this is a new stay or an update
    const existingIndex =
      bookingsContext.selectedItem.stayIds?.indexOf(savedStay._id) ?? -1;
    let newStayIds;

    if (existingIndex === -1) {
      // This is a new stay - add it to our arrays
      newStayIds = [
        ...(bookingsContext.selectedItem.stayIds || []),
        savedStay._id,
      ];

      // Update the booking with the new stay
      bookingsContext.updateField("stayIds", newStayIds);

      // Add the new stay to our local state for immediate UI feedback
      setStays((prevStays) => [...prevStays, savedStay]);
    } else {
      // This is an existing stay that's been updated
      newStayIds = [...bookingsContext.selectedItem.stayIds];

      // Update the stay in our local state
      setStays((prevStays) => {
        const newStays = [...prevStays];
        newStays[existingIndex] = savedStay;
        return newStays;
      });
    }

    // Update our reference to prevent unnecessary reloading
    previousStayIdsRef.current = newStayIds || [];

    // Close the modal
    setIsModalOpen(false);
  };

  return (
    <>
      {isModalOpen && (
        <StayModal
          stay={selectedStay}
          isCopyMode={isCopyMode}
          onSave={handleStaySaved}
          onClose={() => setIsModalOpen(false)}
        />
      )}

      <CommonForm
        dataContext={bookingsContext}
        itemName="Booking"
        entityType="booking"
        basePath="bookings"
        displayName={getDisplayName}
      >
        <BookingDetails bookingsContext={bookingsContext} stays={stays} />
        <div className="col-full">
          <StaysList
            bookingsContext={bookingsContext}
            stays={stays}
            onAddStay={handleAddStay}
            onEditStay={handleEditStay}
            onCopyStay={handleCopyStay}
            onViewStay={handleViewStay}
            onRemoveStay={handleRemoveStay}
          />
        </div>
      </CommonForm>

      {/* Include CSS for status badge styling */}
      <style jsx global>{`
        /* Custom style to modify the top bar title */
        .top-bar__title {
          display: flex !important;
          align-items: center !important;
          gap: 12px !important;
        }

        .status-badge {
          display: inline-block;
          padding: 4px 8px;
          border-radius: 4px;
          font-size: 14px;
          font-weight: 500;
          color: white;
          white-space: nowrap;
        }

        /* Status colors */
        .status-upcoming_no_action {
          background-color: #8b5cf6; /* Purple */
        }

        .status-upcoming_confirmation_sent {
          background-color: #3b82f6; /* Blue */
        }

        .status-stayed_missing_invoice {
          background-color: #f59e0b; /* Amber */
        }

        .status-invoicing_missing_both {
          background-color: #ef4444; /* Red */
        }

        .status-invoicing_missing_sales {
          background-color: #f97316; /* Orange */
        }

        .status-invoicing_missing_commission {
          background-color: #f97316; /* Orange */
        }

        .status-completed {
          background-color: #10b981; /* Green */
        }
      `}</style>
    </>
  );
}