import React from "react";
import { RefreshCw } from "lucide-react";
import Button from "@/components/common/Button";

/**
 * Generate a confirmation number based on the current date and a random alphanumeric sequence
 * Format: YYYYMMDD-XXXX (where XXXX is a random alphanumeric sequence)
 * 
 * @param {string} currentValue The current confirmation number (if any)
 * @param {string} type The type of confirmation number to generate ("booking" or "stay")
 * @returns {string} A new confirmation number
 */
export function generateConfirmationNumber(currentValue = "", type = "booking") {
  // If called for an existing item that already has a confirmation number, preserve it
  if (currentValue && currentValue.trim() !== "") {
    return currentValue;
  }
  
  // Get the current date in YYYYMMDD format
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const dateStr = `${year}${month}${day}`;
  
  // Generate a random alphanumeric sequence
  // Different lengths for different types
  const length = type === "stay" ? 5 : 4;
  const characters = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'; // Removed similar-looking characters
  let randomStr = '';
  for (let i = 0; i < length; i++) {
    randomStr += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  
  // Combine into the final format - NO PREFIX, just the raw value
  if (type === "stay") {
    // For stays: YYYYMMDD-S-XXXXX
    return `${dateStr}-S-${randomStr}`;
  } else {
    // For bookings: YYYYMMDD-XXXX (original format)
    return `${dateStr}-${randomStr}`;
  }
}

/**
 * Format a confirmation number for display
 * 
 * @param {string} confirmationNumber The raw confirmation number
 * @param {string} type The type of confirmation number ("booking" or "stay")
 * @returns {string} The formatted confirmation number
 */
export function formatConfirmationNumber(confirmationNumber, type = "booking") {
  if (!confirmationNumber) return "";
  
  // Different prefixes based on type
  const prefix = type === "stay" ? "ST-" : "BK-";
  return `${prefix}${confirmationNumber}`;
}

/**
 * A field that displays an automatically generated value
 * 
 * @param {Object} props Component props
 * @param {string} props.label Field label
 * @param {string} props.fieldPath Path to the field in the data model
 * @param {string} props.value Current field value
 * @param {Function} props.updateField Function to update the field value
 * @param {boolean} props.isEditing Whether the form is in edit mode
 * @param {boolean} props.isChanged Whether the field has pending changes
 * @param {string} props.type The type of number to generate ("booking" or "stay")
 * @param {boolean} props.allowRefresh Whether to show a refresh button to generate a new value
 * @param {string} props.className Additional CSS class names
 */
export function AutoGeneratedField({
  label,
  fieldPath,
  value = "",
  updateField,
  isEditing = false,
  isChanged = false,
  type = "booking",
  allowRefresh = true,
  className = "",
}) {
  // Generate a new value and update the field
  const handleGenerate = () => {
    // Only generate a new value if the current value is empty or only contains whitespace
    if (!value || value.trim() === "") {
      const newValue = generateConfirmationNumber("", type);
      console.log(`Auto-generating ${type} number:`, newValue);
      updateField(fieldPath, newValue);
    } else if (isEditing) {
      // If there's already a value and we're in edit mode (user clicked refresh)
      // Generate a new value
      const newValue = generateConfirmationNumber("", type);
      console.log(`Regenerating ${type} number:`, newValue);
      updateField(fieldPath, newValue);
    }
  };

  // Auto-generate a value if one doesn't exist and we're in edit mode
  React.useEffect(() => {
    if (isEditing && (!value || value.trim() === "")) {
      // Use a small timeout to ensure this runs after the component is fully mounted
      // and the form is ready to receive updates
      setTimeout(() => {
        handleGenerate();
      }, 100);
    }
  }, [isEditing]); // Only depend on isEditing to ensure it runs once when edit mode starts

  // Display the raw value without any prefix
  const displayValue = value || "";

  return (
    <div className="form-field">
      <label className="field-label">{label}</label>
      <div className="auto-generated-field-container">
        <input
          type="text"
          value={displayValue}
          readOnly
          className={`input-base input-readonly ${className} ${
            isChanged ? "field-changed" : ""
          }`}
        />
        
        {isEditing && allowRefresh && (
          <Button
            icon={RefreshCw}
            onClick={handleGenerate}
            size="sm"
            intent="outline"
            title={`Generate new ${type} number`}
            className="generate-button"
          />
        )}
      </div>

      <style jsx>{`
        .auto-generated-field-container {
          display: flex;
          align-items: center;
          gap: 8px;
        }
        
        .input-readonly {
          background-color: #f9fafb;
          cursor: default;
        }
        
        :global(.generate-button) {
          padding: 6px;
          height: 36px;
        }
      `}</style>
    </div>
  );
}