"use client";
import React, { useState, useEffect, useCallback } from "react";
import Button from "@/components/common/Button";
import { Save, X, Plus } from "lucide-react";
import { LoadingSpinner } from "../loadingSpinner";
import { toast } from "sonner";
import {
  createDocument,
  updateDocument,
  searchDocuments,
} from "@/app/actions/crudActions";
import { TextField } from "../fields/TextField";
import { DropdownField } from "../fields/DropdownField";
import { RefField } from "../fields/RefField";
import { MultiRefField } from "../fields/MultiRefField";
import { RadioField } from "../fields/RadioField";
import { ContactModal } from "../contact/ContactModal";
import { AutoGeneratedField, formatConfirmationNumber } from "../fields/AutoGeneratedField";

// Constants for dropdown options
const CURRENCY_OPTIONS = [
  { value: "EUR", label: "€" },
  { value: "USD", label: "$" },
  { value: "GBP", label: "£" },
  { value: "JPY", label: "¥" },
  { value: "CHF", label: "CHF" },
];

const STATUS_OPTIONS = [
  { value: "unconfirmed", label: "Unconfirmed" },
  { value: "unconfirmed_prepaid", label: "Unconfirmed Prepaid" },
  { value: "confirmed_prepaid_upcoming", label: "Confirmed Prepaid Upcoming" },
  { value: "confirmed_upcoming", label: "Confirmed Upcoming" },
  { value: "confirmed_prepaid_stayed", label: "Confirmed Prepaid Stayed" },
  { value: "confirmed_stayed", label: "Confirmed Stayed" },
  { value: "purchase_invoice_received", label: "Purchase Invoice Received" },
  { value: "cancelled", label: "Cancelled" },
];

const PREPAID_OPTIONS = [
  { value: "yes", label: "Yes" },
  { value: "no", label: "No" },
];

const DEFAULT_ROOM_TYPE_OPTIONS = [
  { value: "single", label: "Single" },
  { value: "double", label: "Double" },
  { value: "suite", label: "Suite" },
  { value: "deluxe", label: "Deluxe" },
];

const PAYMENT_INSTRUCTION_OPTIONS = [
  {
    value:
      "Room and breakfast charges, along with applicable taxes, will be billed to the credit card provided by Corporate Meeting Partner. Any additional expenses incurred during the stay will be settled by the guest upon check-out.",
    label: "Creditcard: Room, breakfast and tax",
  },
  // Other payment options...
];

const CANCELLATION_OPTIONS = [
  {
    value:
      "Cancellations made up to 24 hours prior to arrival will incur no charge. Cancellations made within this timeframe will be charged at 100% of the total cost.",
    label: "24h",
  },
  // Other cancellation options...
];

interface StayModalProps {
  stay?: any;
  isCopyMode?: boolean;
  bookingConfirmationNo?: string;
  bookingId?: string; // Add property for bookingId
  onSave?: (savedStay: any) => void;
  onClose: () => void;
  autoUpdateBooking?: boolean; // New prop to indicate if booking should be updated automatically
}

export function StayModal({
  stay = {},
  isCopyMode = false,
  bookingConfirmationNo = "",
  bookingId = "", // Add parameter for bookingId
  onSave,
  onClose,
  autoUpdateBooking = true, // Default to true for backward compatibility
}: StayModalProps) {
  // Create a stay object with defaults applied
  const [stayData, setStayData] = useState<any>({
    checkInDate: "",
    checkOutDate: "",
    guestIds: [],
    guestNames: [],
    hotelId: "",
    hotelName: "",
    roomNumber: "",
    roomType: "",
    roomPrice: "",
    roomCurrency: "EUR",
    taxAmount: "",
    taxCurrency: "EUR",
    status: "unconfirmed",
    prepaid: "no",
    prepaidDetails: "",
    purchaseInvoice: "",
    remarks: "",
    paymentInstructions: "",
    cancellations: "",
    specialRequests: "",
    confirmationNo: "",
    bookingId: bookingId || stay.bookingId || "", // Initialize with passed bookingId or from stay
    ...stay,
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isFormLoading, setIsFormLoading] = useState(false);
  const [pendingChanges, setPendingChanges] = useState<Record<string, any>>({});
  const [roomTypeOptions, setRoomTypeOptions] = useState(
    DEFAULT_ROOM_TYPE_OPTIONS
  );
  const [isContactModalOpen, setIsContactModalOpen] = useState(false);
  const [fieldLoadingStates, setFieldLoadingStates] = useState({
    hotelId: false,
    guestIds: false,
  });
  const [bookingInfo, setBookingInfo] = useState(null);
  const [isLoadingBooking, setIsLoadingBooking] = useState(false);

  // If this is a copy, clear the _id when component loads
  useEffect(() => {
    if (isCopyMode && stayData._id) {
      const stayCopy = { ...stayData };
      delete stayCopy._id;
      delete stayCopy.confirmationNo; // Clear confirmation number for copies
      if (stayCopy.reference) {
        stayCopy.reference = `${stayCopy.reference} (Copy)`;
      }
      setStayData(stayCopy);
    }
  }, [isCopyMode]);

  // Load booking information if there's a bookingId
  useEffect(() => {
    if (stayData.bookingId) {
      loadBookingInfo(stayData.bookingId);
    }
  }, [stayData.bookingId]);

  // Load booking info to get confirmation number
  const loadBookingInfo = async (bookingId) => {
    try {
      setIsLoadingBooking(true);
      const result = await searchDocuments("bookings", bookingId, "_id");
      
      if (Array.isArray(result) && result.length > 0) {
        setBookingInfo(result[0]);
        
        // If the stay doesn't have a confirmation number but the booking does,
        // update the stay's confirmationNo field
        if (result[0].confirmationNo) {
          setStayData(prev => ({
            ...prev,
            confirmationNo: result[0].confirmationNo
          }));
        }
      }
    } catch (error) {
      console.error("Error loading booking details:", error);
    } finally {
      setIsLoadingBooking(false);
    }
  };

  // Load room types when hotel changes
  useEffect(() => {
    if (stayData.hotelId) {
      loadRoomTypes(stayData.hotelId);
    }
  }, [stayData.hotelId]);

  // Function to check if any fields are loading
  const isAnyFieldLoading = () => {
    return Object.values(fieldLoadingStates).some((isLoading) => isLoading);
  };

  // Update loading state when field loading state changes
  useEffect(() => {
    setIsFormLoading(isAnyFieldLoading());
  }, [fieldLoadingStates]);

  // Memoize setFieldLoading with useCallback to prevent infinite renders
  const setFieldLoading = useCallback(
    (fieldPath: string, isLoading: boolean) => {
      setFieldLoadingStates((prev) => ({
        ...prev,
        [fieldPath]: isLoading,
      }));
    },
    []
  );

  // Load room types from hotel
  const loadRoomTypes = async (hotelId: string) => {
    if (!hotelId) {
      setRoomTypeOptions(DEFAULT_ROOM_TYPE_OPTIONS);
      return;
    }

    setFieldLoading("hotelId", true);

    try {
      const result = await searchDocuments("hotels", hotelId, "_id");

      if (
        Array.isArray(result) &&
        result.length > 0 &&
        result[0].roomTypes?.length > 0
      ) {
        // Convert hotel roomTypes array to dropdown options format
        const hotelRoomTypes = result[0].roomTypes.map((type: string) => ({
          value: type,
          label: type,
        }));
        setRoomTypeOptions(hotelRoomTypes);

        // If current roomType is not in the new options list, clear it
        if (
          stayData.roomType &&
          !result[0].roomTypes.includes(stayData.roomType)
        ) {
          setStayData((prev) => ({
            ...prev,
            roomType: "",
          }));
        }
      } else {
        setRoomTypeOptions(DEFAULT_ROOM_TYPE_OPTIONS);
      }
    } catch (error) {
      console.error("Error loading room types:", error);
      toast.error("Could not load room types from the selected hotel");
      setRoomTypeOptions(DEFAULT_ROOM_TYPE_OPTIONS);
    } finally {
      setFieldLoading("hotelId", false);
    }
  };

  // Handle field changes - memoize this as well
  const handleFieldChange = useCallback((fieldPath: string, value: any) => {
    setStayData((prev) => {
      // For handling nested paths
      const parts = fieldPath.split(".");
      const newState = { ...prev };

      let current = newState;
      for (let i = 0; i < parts.length - 1; i++) {
        if (!current[parts[i]]) current[parts[i]] = {};
        current = current[parts[i]];
      }

      current[parts[parts.length - 1]] = value;
      return newState;
    });

    // Track changes
    setPendingChanges((prev) => ({
      ...prev,
      [fieldPath]: value,
    }));
  }, []);

  // Handle contact creation modal
  const handleAddContact = useCallback(() => {
    setIsContactModalOpen(true);
  }, []);

  // Handle contact creation callback
  const handleContactCreated = useCallback(
    (contactId: string, displayName: string) => {
      if (!contactId) return;

      // Update stay data with new contact
      setStayData((prev) => {
        const newState = { ...prev };

        // Initialize arrays if they don't exist
        if (!newState.guestIds) newState.guestIds = [];
        if (!newState.guestNames) newState.guestNames = [];

        // Add the new contact if not already in the list
        if (!newState.guestIds.includes(contactId)) {
          newState.guestIds.push(contactId);
          newState.guestNames.push(displayName);
        }

        return newState;
      });

      // Track the change
      setPendingChanges((prev) => ({
        ...prev,
        guestIds: true,
      }));

      // Close contact modal
      setIsContactModalOpen(false);
    },
    []
  );

// In src/components/stay/StayModal.tsx:

// Update booking with new stay
const updateBookingWithStay = async (stayId, bookingId) => {
  try {
    // Don't attempt to update if we don't have both IDs
    if (!stayId || !bookingId) {
      console.error("Missing stayId or bookingId for updating booking");
      return false;
    }
    
    // First, get the current booking data
    const bookingResult = await searchDocuments("bookings", bookingId, "_id");
    
    if (!Array.isArray(bookingResult) || bookingResult.length === 0) {
      console.error("Could not find booking to update");
      return false;
    }
    
    const booking = bookingResult[0];
    
    // Create an array of stayIds, making sure we include the new one
    const stayIds = Array.isArray(booking.stayIds) ? [...booking.stayIds] : [];
    
    // Only add the stayId if it's not already in the array
    if (!stayIds.includes(stayId)) {
      stayIds.push(stayId);
      
      // Update the booking with the new stayIds array
      const updateResult = await updateDocument("bookings", bookingId, {
        ...booking,
        stayIds: stayIds
      });
      
      return updateResult.success;
    }
    
    return true; // Stay was already in the booking
  } catch (error) {
    console.error("Error updating booking with new stay:", error);
    return false;
  }
}
// In src/components/stay/StayModal.tsx, modify the handleSave function:

const handleSave = async () => {
  setIsSubmitting(true);

  try {
    // Basic validation
    if (!stayData.checkInDate || !stayData.checkOutDate) {
      toast.error("Please fill in required fields");
      setIsSubmitting(false);
      return;
    }

    // Generate a reference if not provided
    if (!stayData.reference) {
      stayData.reference = `Stay ${new Date().toISOString().slice(0, 10)}`;
    }

    // Make sure we pass the bookingId through
    if (bookingId && !stayData.bookingId) {
      stayData.bookingId = bookingId;
    }

    let result;

    // Either update or create based on if the stay has an ID
    if (!isCopyMode && stayData._id) {
      // Update existing stay
      result = await updateDocument("stays", stayData._id, stayData);
      if (!result.success) {
        toast.error(
          `Failed to update stay: ${result.error || "Unknown error"}`
        );
        setIsSubmitting(false);
        return;
      }

      toast.success("Stay updated successfully");
    } else {
      // Create new stay
      result = await createDocument("stays", stayData);
      if (!result.success) {
        toast.error(
          `Failed to ${isCopyMode ? "copy" : "create"} stay: ${
            result.error || "Unknown error"
          }`
        );
        setIsSubmitting(false);
        return;
      }

      toast.success(`Stay ${isCopyMode ? "copied" : "created"} successfully`);
    }

    // Call the callback with the saved stay data
    if (onSave && result.data) {
      onSave(result.data);
    }

    // Close the modal
    onClose();
  } catch (error) {
    console.error("Save error:", error);
    toast.error("An unexpected error occurred");
    setIsSubmitting(false);
  }
}

  // Determine if this stay should show a booking number or its own number
  const isLinkedToBooking = !!stayData.bookingId || !!bookingConfirmationNo;

  return (
    <>
      {/* Contact Modal */}
      {isContactModalOpen && (
        <ContactModal
          initialData={{ general: { role: "guest" } }}
          callback={handleContactCreated}
          onClose={() => setIsContactModalOpen(false)}
        />
      )}

      <div className="modal-overlay">
        <div className="modal-container">
          <div className="modal-header">
            <h2>
              {isCopyMode
                ? "Copy Stay"
                : stayData._id
                ? "Edit Stay"
                : "Add Stay"}
            </h2>
            <button className="close-button" onClick={onClose}>
              <X size={24} />
            </button>
          </div>

          <div className="modal-content">
            <LoadingSpinner isLoading={isFormLoading} />

            <div className="form-container">
              <div className="col-half">
                {/* Confirmation Number field */}
                {isLinkedToBooking ? (
                  // Show a TextField when linked to a booking - display the booking's confirmation number
                  <TextField
                    label="Booking Confirmation No."
                    fieldPath="confirmationNo"
                    value={stayData.confirmationNo || ""}
                    onChange={handleFieldChange}
                    isEditing={false}
                    disabled={true}
                  />
                ) : (
                  // Show AutoGeneratedField with stay type when not linked to a booking
                  <AutoGeneratedField
                    label="Stay No."
                    fieldPath="confirmationNo"
                    value={stayData.confirmationNo || ""}
                    updateField={handleFieldChange}
                    isEditing={true}
                    type="stay"
                    allowRefresh={true}
                  />
                )}

                {stayData.bookingId && bookingInfo && (
                  <div className="booking-link-note">
                    <p>This stay is linked to booking {formatConfirmationNumber(bookingInfo.confirmationNo)}</p>
                  </div>
                )}

                <RefField
                  label="Hotel"
                  fieldPath="hotelId"
                  nameFieldPath="hotelName"
                  value={stayData.hotelId || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  collectionName="hotels"
                  displayFields={["name", "address"]}
                  setFieldLoading={setFieldLoading}
                  required={true}
                />

                <DropdownField
                  label="Room Type"
                  fieldPath="roomType"
                  value={stayData.roomType || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  options={roomTypeOptions}
                  placeholder={
                    fieldLoadingStates.hotelId
                      ? "Loading room types..."
                      : "Select a room type"
                  }
                  disabled={fieldLoadingStates.hotelId || !stayData.hotelId}
                />

                <div className="currency-group">
                  <label className="field-label">Room Price</label>
                  <div className="grouper">
                    <DropdownField
                      fieldPath="roomCurrency"
                      value={stayData.roomCurrency || "EUR"}
                      onChange={handleFieldChange}
                      isEditing={true}
                      options={CURRENCY_OPTIONS}
                      className="currency-select"
                      compact={true}
                    />

                    <TextField
                      fieldPath="roomPrice"
                      label=""
                      value={stayData.roomPrice || ""}
                      onChange={handleFieldChange}
                      isEditing={true}
                      type="number"
                      className="price-input"
                    />
                  </div>
                </div>

             

                <DropdownField
                  label="Payment Instructions"
                  fieldPath="paymentInstructions"
                  value={stayData.paymentInstructions || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  options={PAYMENT_INSTRUCTION_OPTIONS}
                />

                <DropdownField
                  label="Cancellations"
                  fieldPath="cancellations"
                  value={stayData.cancellations || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  options={CANCELLATION_OPTIONS}
                />
                   {/* New Tax Field */}
                   <div className="currency-group">
                  <label className="field-label">Tax</label>
                  <div className="grouper">
                    <DropdownField
                      fieldPath="taxCurrency"
                      value={stayData.taxCurrency || stayData.roomCurrency || "EUR"}
                      onChange={handleFieldChange}
                      isEditing={true}
                      options={CURRENCY_OPTIONS}
                      className="currency-select"
                      compact={true}
                    />

                    <TextField
                      fieldPath="taxAmount"
                      label=""
                      value={stayData.taxAmount || ""}
                      onChange={handleFieldChange}
                      isEditing={true}
                      type="number"
                      className="price-input"
                    />
                  </div>
                </div>
                <MultiRefField
                  label="Guests"
                  fieldPath="guestIds"
                  value={stayData.guestIds || []}
                  updateField={handleFieldChange}
                  isEditing={true}
                  collectionName="contacts"
                  displayFields={["general.firstName", "general.lastName"]}
                  showQuickAdd={true}
                  setFieldLoading={setFieldLoading}
                />
              </div>

              <div className="col-half">
                <TextField
                  label="Check-in Date"
                  fieldPath="checkInDate"
                  value={stayData.checkInDate || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  type="date"
                  required={true}
                />

                <TextField
                  label="Check-out Date"
                  fieldPath="checkOutDate"
                  value={stayData.checkOutDate || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  type="date"
                  required={true}
                />

                {/* Status field */}
                <DropdownField
                  label="Status"
                  fieldPath="status"
                  value={stayData.status || "unconfirmed"}
                  onChange={handleFieldChange}
                  isEditing={true}
                  options={STATUS_OPTIONS}
                  required={true}
                />

                {/* Prepaid field */}
                <RadioField
                  label="Prepaid"
                  fieldPath="prepaid"
                  value={stayData.prepaid || "no"}
                  updateField={handleFieldChange}
                  isEditing={true}
                  options={PREPAID_OPTIONS}
                  required={true}
                />

                {/* Conditional prepaid details field */}
                {stayData.prepaid === "yes" && (
                  <TextField
                    label="Prepaid Details"
                    fieldPath="prepaidDetails"
                    value={stayData.prepaidDetails || ""}
                    onChange={handleFieldChange}
                    isEditing={true}
                    placeholder="e.g., Prepaid credit card 18/7"
                  />
                )}

                {/* Purchase Invoice field */}
                <TextField
                  label="Purchase Invoice"
                  fieldPath="purchaseInvoice"
                  value={stayData.purchaseInvoice || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                />

                <TextField
                  label="Special Requests"
                  fieldPath="specialRequests"
                  value={stayData.specialRequests || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  multiline={true}
                  rows={4}
                />

                <TextField
                  label="Remarks"
                  fieldPath="remarks"
                  value={stayData.remarks || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  multiline={true}
                  rows={4}
                />
              </div>
            </div>

            <div className="modal-footer">
              <Button
                intent="secondary"
                icon={X}
                onClick={onClose}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button
                icon={Save}
                onClick={handleSave}
                disabled={isSubmitting || isFormLoading}
                isLoading={isSubmitting}
              >
                {isCopyMode
                  ? "Create Copy"
                  : stayData._id
                  ? "Update Stay"
                  : "Create Stay"}
              </Button>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        .grouper {
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }
        .currency-select {
          width: 80px;
        }
        .price-input {
          flex: 1;
        }
        .currency-group {
          margin-bottom: 16px;
        }
        .booking-link-note {
          margin-bottom: 16px;
          padding: 8px 12px;
          background-color: #f3f4f6;
          border-left: 3px solid #3b82f6;
          border-radius: 4px;
          font-size: 14px;
        }
        .booking-link-note p {
          margin: 0;
          color: #4b5563;
        }
      `}</style>
    </>
  );
}