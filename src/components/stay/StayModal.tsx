"use client";
import React, { useState, useEffect, useCallback } from "react";
import Button from "@/components/common/Button";
import { Save, X, Plus, CreditCard, Calendar, Euro } from "lucide-react";
import { toast } from "sonner";
import {
  createDocument,
  updateDocument,
  searchDocuments,
} from "@/app/actions/crudActions";
import { TextField } from "../fields/TextField";
import { DropdownField } from "../fields/DropdownField";
import { RefField } from "../fields/RefField";
import { MultiRefField } from "../fields/MultiRefField";
import { RadioField } from "../fields/RadioField";
import { ContactModal } from "../contact/ContactModal";
import {
  AutoGeneratedField,
  formatConfirmationNumber,
} from "../fields/AutoGeneratedField";
import {
  CURRENCY_OPTIONS,
  PAYMENT_INVOICE_PAID_OPTIONS,
  CANCELLATION_OPTIONS,
  PAYMENT_INSTRUCTION_OPTIONS,
  PAYMENT_TYPE_OPTIONS,
  STATUS_OPTIONS,
  PREPAID_OPTIONS,
  DEFAULT_ROOM_TYPE_OPTIONS,
} from "./stayConstants";

interface StayModalProps {
  stay?: any;
  isCopyMode?: boolean;
  bookingConfirmationNo?: string;
  bookingId?: string;
  onSave?: (savedStay: any) => void;
  onClose: () => void;
  autoUpdateBooking?: boolean;
}

export function StayModal({
  stay = {},
  isCopyMode = false,
  bookingConfirmationNo = "",
  bookingId = "",
  onSave,
  onClose,
  autoUpdateBooking = true,
}: StayModalProps) {
  const [stayData, setStayData] = useState<any>({
    checkInDate: "",
    checkOutDate: "",
    guestIds: [],
    // guestNames: [],
    hotelId: "",
    hotelName: "",
    hotelConfirmationNo: "",
    roomNumber: "",
    roomType: "",
    roomPrice: "",
    roomCurrency: "EUR",
    taxAmount: "",
    taxCurrency: "EUR",
    status: "unconfirmed",
    prepaid: "no",
    prepaidDetails: "",
    purchaseInvoice: "",
    commissionInvoice: "",
    remarks: "",
    adminRemarks: "",
    specialRequests: "",
    confirmationNo: "",
    // MODIFIED: Set default values for these fields to the first option
    paymentType: PAYMENT_TYPE_OPTIONS[0].value,
    paymentInstructions: PAYMENT_INSTRUCTION_OPTIONS[0].value,
    cancellations: CANCELLATION_OPTIONS[0].value,
    // NEW: Payment fields
    purchaseInvoicePaid: PAYMENT_INVOICE_PAID_OPTIONS[0].value,
    paymentCurrency: "EUR",
    paymentDeadline: "",
    paymentDate: "",
    ...stay,
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isFormLoading, setIsFormLoading] = useState(false);
  const [pendingChanges, setPendingChanges] = useState<Record<string, any>>({});
  const [roomTypeOptions, setRoomTypeOptions] = useState(
    DEFAULT_ROOM_TYPE_OPTIONS
  );
  const [isContactModalOpen, setIsContactModalOpen] = useState(false);
  const [fieldLoadingStates, setFieldLoadingStates] = useState({
    hotelId: false,
    guestIds: false,
  });

  useEffect(() => {
    if (isCopyMode && stayData._id) {
      const stayCopy = { ...stayData };
      delete stayCopy._id;
      delete stayCopy.confirmationNo;
      if (stayCopy.reference) {
        stayCopy.reference = `${stayCopy.reference} (Copy)`;
      }
      setStayData(stayCopy);
    }
  }, [isCopyMode]);



  useEffect(() => {
    if (stayData.hotelId) {
      loadRoomTypes(stayData.hotelId);
    }
  }, [stayData.hotelId]);

  const isAnyFieldLoading = () => {
    return Object.values(fieldLoadingStates).some((isLoading) => isLoading);
  };

  useEffect(() => {
    setIsFormLoading(isAnyFieldLoading());
  }, [fieldLoadingStates]);

  const setFieldLoading = useCallback(
    (fieldPath: string, isLoading: boolean) => {
      setFieldLoadingStates((prev) => ({
        ...prev,
        [fieldPath]: isLoading,
      }));
    },
    []
  );

  const loadRoomTypes = async (hotelId: string) => {
    if (!hotelId) {
      setRoomTypeOptions(DEFAULT_ROOM_TYPE_OPTIONS);
      return;
    }

    setFieldLoading("hotelId", true);

    try {
      const result = await searchDocuments("hotels", hotelId, "_id");

      if (
        Array.isArray(result) &&
        result.length > 0 &&
        result[0].roomTypes?.length > 0
      ) {
        const hotelRoomTypes = result[0].roomTypes.map((type: string) => ({
          value: type,
          label: type,
        }));
        setRoomTypeOptions(hotelRoomTypes);

        if (
          stayData.roomType &&
          !result[0].roomTypes.includes(stayData.roomType)
        ) {
          setStayData((prev) => ({
            ...prev,
            roomType: "",
          }));
        }
      } else {
        setRoomTypeOptions(DEFAULT_ROOM_TYPE_OPTIONS);
      }
    } catch (error) {
      console.error("Error loading room types:", error);
      toast.error("Could not load room types from the selected hotel");
      setRoomTypeOptions(DEFAULT_ROOM_TYPE_OPTIONS);
    } finally {
      setFieldLoading("hotelId", false);
    }
  };

  const handleFieldChange = useCallback((fieldPath: string, value: any) => {
    setStayData((prev) => {
      const parts = fieldPath.split(".");
      const newState = { ...prev };

      let current = newState;
      for (let i = 0; i < parts.length - 1; i++) {
        if (!current[parts[i]]) current[parts[i]] = {};
        current = current[parts[i]];
      }

      current[parts[parts.length - 1]] = value;
      return newState;
    });

    setPendingChanges((prev) => ({
      ...prev,
      [fieldPath]: value,
    }));
  }, []);

  const handlePaymentInstructionChange = (fieldPath: string, value: string) => {
    if (value === "custom") {
      handleFieldChange(fieldPath, "");
    } else {
      handleFieldChange(fieldPath, value);
    }
  };

  const handleCancellationChange = (fieldPath: string, value: string) => {
    if (value === "custom") {
      handleFieldChange(fieldPath, "");
    } else {
      handleFieldChange(fieldPath, value);
    }
  };

  const handlePurchaseInvoicePaidChange = (
    fieldPath: string,
    value: string
  ) => {
    if (value === "custom") {
      handleFieldChange(fieldPath, "");
    } else {
      handleFieldChange(fieldPath, value);
    }
  };

  const handleAddContact = useCallback(() => {
    setIsContactModalOpen(true);
  }, []);

  const handleContactCreated = useCallback(
    (contactId: string, displayName: string) => {
      if (!contactId) return;

      setStayData((prev) => {
        const newState = { ...prev };
        if (!newState.guestIds) newState.guestIds = [];
        // Only add to guestIds, not guestNames
        if (!newState.guestIds.includes(contactId)) {
          newState.guestIds.push(contactId);
        }
        return newState;
      });

      setPendingChanges((prev) => ({
        ...prev,
        guestIds: true,
      }));
      setIsContactModalOpen(false);
    },
    []
  );
  const updateBookingStaySummary = async (
    bookingId: string,
    stayId: string,
    guestIds: string[]
  ) => {
    try {
      // 1. Fetch the booking
      const bookingResult = await searchDocuments("bookings", bookingId, "_id");

      if (!Array.isArray(bookingResult) || bookingResult.length === 0) {
        console.warn("Booking not found for stay summary update");
        return;
      }

      const booking = bookingResult[0];

      if (!booking.staySummaries || !Array.isArray(booking.staySummaries)) {
        console.warn("Booking has no staySummaries to update");
        return;
      }

      // 2. Load guest names from guestIds
      let guestNames: string[] = [];
      if (guestIds && guestIds.length > 0) {
        for (const guestId of guestIds) {
          try {
            const guestResult = await searchDocuments(
              "contacts",
              guestId,
              "_id"
            );
            if (Array.isArray(guestResult) && guestResult.length > 0) {
              const contact = guestResult[0];
              const firstName = contact.general?.firstName || "";
              const lastName = contact.general?.lastName || "";
              const fullName = `${firstName} ${lastName}`.trim();
              if (fullName) {
                guestNames.push(fullName);
              }
            }
          } catch (error) {
            console.error(
              `Error fetching guest name for ID ${guestId}:`,
              error
            );
          }
        }
      }

      // 3. Update the specific stay summary
      const updatedStaySummaries = booking.staySummaries.map((summary) => {
        if (summary.stayId === stayId) {
          return {
            ...summary,
            guestNames: guestNames,
          };
        }
        return summary;
      });

      // 4. Update the booking with new staySummaries
      const updateResult = await updateDocument("bookings", bookingId, {
        ...booking,
        staySummaries: updatedStaySummaries,
      });

      if (updateResult.success) {
        console.log("Booking stay summary updated successfully");
      } else {
        console.error(
          "Failed to update booking stay summary:",
          updateResult.error
        );
      }
    } catch (error) {
      console.error("Error updating booking stay summary:", error);
    }
  };
  const handleSave = async () => {
    setIsSubmitting(true);

    try {
      if (!stayData.checkInDate || !stayData.checkOutDate) {
        toast.error("Please fill in required fields");
        setIsSubmitting(false);
        return;
      }

      if (!stayData.reference) {
        stayData.reference = `Stay ${new Date().toISOString().slice(0, 10)}`;
      }

      let result;
      if (!isCopyMode && stayData._id) {
        result = await updateDocument("stays", stayData._id, stayData);
        if (!result.success) {
          toast.error(
            `Failed to update stay: ${result.error || "Unknown error"}`
          );
          setIsSubmitting(false);
          return;
        }
        toast.success("Stay updated successfully");
      } else {
        result = await createDocument("stays", stayData);
        if (!result.success) {
          toast.error(
            `Failed to ${isCopyMode ? "copy" : "create"} stay: ${
              result.error || "Unknown error"
            }`
          );
          setIsSubmitting(false);
          return;
        }
        toast.success(`Stay ${isCopyMode ? "copied" : "created"} successfully`);
      }

      // NEW: Update booking's staySummaries with current guest names if this stay is linked to a booking
      if (result.data && bookingId) {
        await updateBookingStaySummary(
          bookingId,
          result.data._id,
          stayData.guestIds || []
        );
      }

      if (onSave && result.data) {
        onSave(result.data);
      }

      onClose();
    } catch (error) {
      console.error("Save error:", error);
      toast.error("An unexpected error occurred");
      setIsSubmitting(false);
    }
  };


  const isStandardPaymentInstruction =
    stayData?.paymentInstructions &&
    PAYMENT_INSTRUCTION_OPTIONS.some(
      (option) => option.value === stayData.paymentInstructions
    );

  const showCustomPaymentField = !isStandardPaymentInstruction;

  const paymentInstructionDropdownValue = isStandardPaymentInstruction
    ? stayData.paymentInstructions
    : "custom";

  const isStandardCancellation =
    stayData?.cancellations &&
    CANCELLATION_OPTIONS.some(
      (option) => option.value === stayData.cancellations
    );

  const showCustomCancellationField = !isStandardCancellation;

  const cancellationDropdownValue = isStandardCancellation
    ? stayData.cancellations
    : "custom";

  const isStandardPurchaseInvoicePaid =
    stayData?.purchaseInvoicePaid &&
    PAYMENT_INVOICE_PAID_OPTIONS.some(
      (option) => option.value === stayData.purchaseInvoicePaid
    );

  const showCustomPurchaseInvoicePaidField = !isStandardPurchaseInvoicePaid;

  const purchaseInvoicePaidDropdownValue = isStandardPurchaseInvoicePaid
    ? stayData.purchaseInvoicePaid
    : "custom";

  return (
    <>
      {isContactModalOpen && (
        <ContactModal
          initialData={{ general: { role: "guest" } }}
          callback={handleContactCreated}
          onClose={() => setIsContactModalOpen(false)}
        />
      )}

      <div className="modal-overlay">
        <div className="modal-container">
          <div className="modal-header">
            <h2>
              {isCopyMode
                ? "Copy Stay"
                : stayData._id
                ? "Edit Stay"
                : "Add Stay"}
            </h2>
            <button className="close-button" onClick={onClose}>
              <X size={24} />
            </button>
          </div>

          <div className="modal-content">
            <div className="form-container">
              <div className="col-half">
                {/* Other fields... */}

                {/* {stayData.bookingId && bookingInfo && (
                  <div className="booking-link-note">
                    <p>
                      This stay is part of booking{" "}
                      {formatConfirmationNumber(bookingInfo.confirmationNo)}
                    </p>
                  </div>
                )} */}

                <RefField
                  label="Hotel"
                  fieldPath="hotelId"
                  nameFieldPath="hotelName"
                  value={stayData.hotelId || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  collectionName="hotels"
                  displayFields={["name", "address"]}
                  setFieldLoading={setFieldLoading}
                  required={true}
                />

                <TextField
                  label="Hotel Confirmation No."
                  fieldPath="hotelConfirmationNo"
                  value={stayData.hotelConfirmationNo || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  required={true}
                />

                <DropdownField
                  label="Room Type"
                  fieldPath="roomType"
                  value={stayData.roomType || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  options={roomTypeOptions}
                  placeholder={
                    fieldLoadingStates.hotelId
                      ? "Loading room types..."
                      : "Select a room type"
                  }
                  disabled={fieldLoadingStates.hotelId || !stayData.hotelId}
                />

                <div className="currency-group">
                  <label className="field-label">Room Price</label>
                  <div className="grouper">
                    <DropdownField
                      fieldPath="roomCurrency"
                      value={stayData.roomCurrency || "EUR"}
                      onChange={handleFieldChange}
                      isEditing={true}
                      options={CURRENCY_OPTIONS}
                      className="currency-select"
                      compact={true}
                    />

                    <TextField
                      fieldPath="roomPrice"
                      label=""
                      value={stayData.roomPrice || ""}
                      onChange={handleFieldChange}
                      isEditing={true}
                      type="number"
                      className="price-input"
                    />
                  </div>
                </div>
                <MultiRefField
                  label="Guests"
                  fieldPath="guestIds"
                  value={stayData.guestIds || []}
                  updateField={handleFieldChange}
                  isEditing={true}
                  collectionName="contacts"
                  displayFields={["general.firstName", "general.lastName"]}
                  showQuickAdd={true}
                  setFieldLoading={setFieldLoading}
                />
                <div className="currency-group">
                  <label className="field-label">Tax</label>
                  <div className="grouper">
                    <DropdownField
                      fieldPath="taxCurrency"
                      value={
                        stayData.taxCurrency || stayData.roomCurrency || "EUR"
                      }
                      onChange={handleFieldChange}
                      isEditing={true}
                      options={CURRENCY_OPTIONS}
                      className="currency-select"
                      compact={true}
                    />

                    <TextField
                      fieldPath="taxAmount"
                      label=""
                      value={stayData.taxAmount || ""}
                      onChange={handleFieldChange}
                      isEditing={true}
                      type="number"
                      className="price-input"
                    />
                  </div>
                </div>
                {/* Booking Terms Section */}
                <div className="form-section">
                  <div className="section-header">
                    <Calendar size={20} />
                    <h3>Booking Terms</h3>
                  </div>

                  <DropdownField
                    label="Payment Type"
                    fieldPath="paymentType"
                    value={stayData.paymentType || ""}
                    onChange={handleFieldChange}
                    isEditing={true}
                    options={PAYMENT_TYPE_OPTIONS}
                    placeholder="Select a payment type"
                  />

                  <DropdownField
                    label="Payment Instructions"
                    fieldPath="paymentInstructions"
                    value={paymentInstructionDropdownValue || ""}
                    onChange={handlePaymentInstructionChange}
                    isEditing={true}
                    options={PAYMENT_INSTRUCTION_OPTIONS}
                  />

                  {showCustomPaymentField && (
                    <TextField
                      fieldPath="paymentInstructions"
                      label=""
                      value={
                        isStandardPaymentInstruction
                          ? ""
                          : stayData?.paymentInstructions || ""
                      }
                      onChange={handleFieldChange}
                      isEditing={true}
                      multiline={true}
                      rows={4}
                      placeholder="Enter custom payment instructions"
                    />
                  )}

                  <DropdownField
                    label="Cancellations"
                    fieldPath="cancellations"
                    value={cancellationDropdownValue || ""}
                    onChange={handleCancellationChange}
                    isEditing={true}
                    options={CANCELLATION_OPTIONS}
                  />

                  {showCustomCancellationField && (
                    <TextField
                      fieldPath="cancellations"
                      label=""
                      value={
                        isStandardCancellation
                          ? ""
                          : stayData?.cancellations || ""
                      }
                      onChange={handleFieldChange}
                      isEditing={true}
                      multiline={true}
                      rows={4}
                      placeholder="Enter custom cancellation policy"
                    />
                  )}
                </div>
                {/* Invoice & Payment Section */}
                <div className="form-section">
                  <div className="section-header">
                    <Euro size={20} />
                    <h3>Invoice & Payment</h3>
                  </div>

                  <RadioField
                    label="Prepaid"
                    fieldPath="prepaid"
                    value={stayData.prepaid || "no"}
                    updateField={handleFieldChange}
                    isEditing={true}
                    options={PREPAID_OPTIONS}
                    required={true}
                  />

                  {stayData.prepaid === "yes" && (
                    <TextField
                      label="Prepaid Details"
                      fieldPath="prepaidDetails"
                      value={stayData.prepaidDetails || ""}
                      onChange={handleFieldChange}
                      isEditing={true}
                      placeholder="e.g., Prepaid credit card 18/7"
                    />
                  )}

                  <TextField
                    label="Purchase Invoice"
                    fieldPath="purchaseInvoice"
                    value={stayData.purchaseInvoice || ""}
                    onChange={handleFieldChange}
                    isEditing={true}
                  />

                  <TextField
                    label="Commission Invoice"
                    fieldPath="commissionInvoice"
                    value={stayData.commissionInvoice || ""}
                    onChange={handleFieldChange}
                    isEditing={true}
                  />
                </div>
              </div>

              <div className="col-half">
                <TextField
                  label="Check-in Date"
                  fieldPath="checkInDate"
                  value={stayData.checkInDate || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  type="date"
                  required={true}
                />

                <TextField
                  label="Check-out Date"
                  fieldPath="checkOutDate"
                  value={stayData.checkOutDate || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  type="date"
                  required={true}
                />

                {/* <DropdownField
                  label="Status"
                  fieldPath="status"
                  value={stayData.status || "unconfirmed"}
                  onChange={handleFieldChange}
                  isEditing={true}
                  options={STATUS_OPTIONS}
                  required={true}
                /> */}

                <TextField
                  label="Special Requests"
                  fieldPath="specialRequests"
                  value={stayData.specialRequests || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  multiline={true}
                  rows={4}
                />

                <TextField
                  label="Remarks"
                  fieldPath="remarks"
                  value={stayData.remarks || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  multiline={true}
                  rows={4}
                />
                <TextField
                  label="Admin remarks (does NOT appear on confirmation)"
                  fieldPath="adminRemarks"
                  value={stayData.adminRemarks || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  multiline={true}
                  rows={4}
                />

                {/* Payment Information Section */}
                <div className="form-section">
                  <div className="section-header">
                    <CreditCard size={20} />
                    <h3>Payment Information</h3>
                  </div>

                  <DropdownField
                    label="Purchase invoice paid?"
                    fieldPath="purchaseInvoicePaid"
                    value={
                      purchaseInvoicePaidDropdownValue ||
                      PAYMENT_INVOICE_PAID_OPTIONS[0].value
                    }
                    onChange={handlePurchaseInvoicePaidChange}
                    isEditing={true}
                    options={PAYMENT_INVOICE_PAID_OPTIONS}
                    placeholder="Select payment status"
                  />

                  {showCustomPurchaseInvoicePaidField && (
                    <TextField
                      fieldPath="purchaseInvoicePaid"
                      label=""
                      value={
                        isStandardPurchaseInvoicePaid
                          ? ""
                          : stayData?.purchaseInvoicePaid || ""
                      }
                      onChange={handleFieldChange}
                      isEditing={true}
                      multiline={true}
                      rows={4}
                      placeholder="Enter custom payment status"
                    />
                  )}

                  <div className="currency-group">
                    <label className="field-label">Payment Currency</label>
                    <DropdownField
                      fieldPath="paymentCurrency"
                      value={stayData.paymentCurrency || "EUR"}
                      onChange={handleFieldChange}
                      isEditing={true}
                      options={CURRENCY_OPTIONS}
                      placeholder="Select currency"
                    />
                  </div>

                  <TextField
                    label="Payment Deadline"
                    fieldPath="paymentDeadline"
                    value={stayData.paymentDeadline || ""}
                    onChange={handleFieldChange}
                    isEditing={true}
                    type="date"
                  />

                  <TextField
                    label="Payment Date"
                    fieldPath="paymentDate"
                    value={stayData.paymentDate || ""}
                    onChange={handleFieldChange}
                    isEditing={true}
                    type="date"
                  />
                </div>
              </div>
            </div>

            <div className="modal-footer">
              <Button
                intent="secondary"
                icon={X}
                onClick={onClose}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button
                icon={Save}
                onClick={handleSave}
                disabled={isSubmitting || isFormLoading}
                isLoading={isSubmitting}
              >
                {isCopyMode
                  ? "Create Copy"
                  : stayData._id
                  ? "Update Stay"
                  : "Create Stay"}
              </Button>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        .grouper {
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }
        .currency-select {
          width: 80px;
        }
        .price-input {
          flex: 1;
        }
        .currency-group {
          margin-bottom: 16px;
        }
        .booking-link-note {
          margin-bottom: 16px;
          padding: 8px 12px;
          background-color: #f3f4f6;
          border-left: 3px solid #3b82f6;
          border-radius: 4px;
          font-size: 14px;
        }
        .booking-link-note p {
          margin: 0;
          color: #4b5563;
        }
        .form-section {
          margin: 24px 0;
          padding: 20px;
          background-color: #f8fafc;
          border-radius: 8px;
          border: 1px solid #e2e8f0;
        }
        .section-header {
          display: flex;
          align-items: center;
          gap: 8px;
          margin-bottom: 16px;
          padding-bottom: 12px;
          border-bottom: 2px solid #e2e8f0;
        }
        .section-header h3 {
          margin: 0;
          font-size: 16px;
          font-weight: 600;
          color: #1e293b;
        }
        .section-header svg {
          color: #3b82f6;
        }
      `}</style>
    </>
  );
}
