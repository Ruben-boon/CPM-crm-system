"use client";
import React, { useState, useEffect, useCallback } from "react";
import Button from "@/components/common/Button";
import { Save, X, Plus } from "lucide-react";
import { toast } from "sonner";
import {
  createDocument,
  updateDocument,
  searchDocuments,
} from "@/app/actions/crudActions";
import { TextField } from "../fields/TextField";
import { DropdownField } from "../fields/DropdownField";
import { RefField } from "../fields/RefField";
import { MultiRefField } from "../fields/MultiRefField";
import { RadioField } from "../fields/RadioField";
import { ContactModal } from "../contact/ContactModal";
import { AutoGeneratedField, formatConfirmationNumber } from "../fields/AutoGeneratedField";

// Constants for dropdown options from StayForm.tsx
const CURRENCY_OPTIONS = [
  { value: "EUR", label: "EUR" },
  { value: "USD", label: "USD" },
  { value: "GBP", label: "GBP" },
  { value: "JPY", label: "JPY" },
  { value: "CHF", label: "CHF" },
  { value: "HUF", label: "HUF" },
  { value: "PLN", label: "PLN" },
  { value: "DKK", label: "DKK" },
  { value: "CAD", label: "CAD" },
  { value: "SEK", label: "SEK" },
  { value: "HKD", label: "HKD" },
  { value: "BRL", label: "BRL" },
  { value: "TRY", label: "TRY" },
  { value: "CZK", label: "CZK" },
  { value: "ISK", label: "ISK" },
  { value: "INR", label: "INR" },
  { value: "NOK", label: "NOK" },
  { value: "RSD", label: "RSD" },
  { value: "SGD", label: "SGD" },
  { value: "HRK", label: "HRK" },
  { value: "BGN", label: "BGN" },
];

const CANCELLATION_OPTIONS = [
  {
    value:
      "Cancellations made up to 24 hours prior to arrival will incur no charge. Cancellations made within this timeframe will be charged at 100% of the total cost.",
    label: "24h",
  },
  {
    value:
      "Cancellations made up to 48 hours prior to arrival will incur no charge. Cancellations made within this timeframe will be charged at 100% of the total cost.",
    label: "48h",
  },
  {
    value:
      "Cancellations made up to 72 hours prior to arrival will incur no charge. Cancellations made within this timeframe will be charged at 100% of the total cost.",
    label: "72h",
  },
  {
    value:
      "Non-Refundable Reservation â€“ This booking cannot be canceled or modified without incurring charges.",
    label: "Non-ref",
  },
];

const PAYMENT_INSTRUCTION_OPTIONS = [
  {
    value:
      "Room and breakfast charges, along with applicable taxes, will be billed to the credit card provided by Corporate Meeting Partner. Any additional expenses incurred during the stay will be settled by the guest upon check-out.",
    label: "Creditcard: Room, breakfast and tax",
  },
  {
    value:
      "Room and applicable tax charges will be billed to the credit card provided by Corporate Meeting Partner. Any additional expenses incurred during the stay will be settled by the guest upon check-out.",
    label: "Creditcard: Room and tax",
  },
  {
    value:
      "All charges will be billed to the credit card provided by Corporate Meeting Partner.",
    label: "Creditcard: All charges",
  },
  {
    value:
      "Room and breakfast charges, along with applicable taxes, will be invoiced to Corporate Meeting Partner. Any additional expenses will be settled by the guest upon check-out.",
    label: "Billed: Room, breakfast and tax",
  },
  {
    value:
      "Room and applicable tax charges will be invoiced to Corporate Meeting Partner. Any additional expenses will be settled by the guest upon check-out.",
    label: "Billed: Room and tax",
  },
  {
    value: "All charges will be invoiced to Corporate Meeting Partner.",
    label: "Billed: All charges",
  },
  {
    value: "All charges will be settled by the guest upon check-out.",
    label: "Own Account",
  },
  {
    value: "custom",
    label: "Custom payment ..",
  },
];


const STATUS_OPTIONS = [
  { value: "unconfirmed", label: "Unconfirmed" },
  { value: "unconfirmed_prepaid", label: "Unconfirmed Prepaid" },
  { value: "confirmed_prepaid_upcoming", label: "Confirmed Prepaid Upcoming" },
  { value: "confirmed_upcoming", label: "Confirmed Upcoming" },
  { value: "confirmed_prepaid_stayed", label: "Confirmed Prepaid Stayed" },
  { value: "confirmed_stayed", label: "Confirmed Stayed" },
  { value: "purchase_invoice_received", label: "Purchase Invoice Received" },
  { value: "cancelled", label: "Cancelled" },
];

const PREPAID_OPTIONS = [
  { value: "yes", label: "Yes" },
  { value: "no", label: "No" },
];

const DEFAULT_ROOM_TYPE_OPTIONS = [
  { value: "single", label: "Single" },
  { value: "double", label: "Double" },
  { value: "suite", label: "Suite" },
  { value: "deluxe", label: "Deluxe" },
];

interface StayModalProps {
  stay?: any;
  isCopyMode?: boolean;
  bookingConfirmationNo?: string;
  bookingId?: string;
  onSave?: (savedStay: any) => void;
  onClose: () => void;
  autoUpdateBooking?: boolean;
}

export function StayModal({
  stay = {},
  isCopyMode = false,
  bookingConfirmationNo = "",
  bookingId = "",
  onSave,
  onClose,
  autoUpdateBooking = true,
}: StayModalProps) {
  const [stayData, setStayData] = useState<any>({
    checkInDate: "",
    checkOutDate: "",
    guestIds: [],
    guestNames: [],
    hotelId: "",
    hotelName: "",
    hotelConfirmationNo: "",
    roomNumber: "",
    roomType: "",
    roomPrice: "",
    roomCurrency: "EUR",
    taxAmount: "",
    taxCurrency: "EUR",
    status: "unconfirmed",
    prepaid: "no",
    prepaidDetails: "",
    purchaseInvoice: "",
    remarks: "",
    adminRemarks: "", // Added field
    paymentInstructions: "",
    cancellations: "",
    specialRequests: "",
    confirmationNo: "",
    bookingId: bookingId || stay.bookingId || "",
    ...stay,
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isFormLoading, setIsFormLoading] = useState(false);
  const [pendingChanges, setPendingChanges] = useState<Record<string, any>>({});
  const [roomTypeOptions, setRoomTypeOptions] = useState(
    DEFAULT_ROOM_TYPE_OPTIONS
  );
  const [isContactModalOpen, setIsContactModalOpen] = useState(false);
  const [fieldLoadingStates, setFieldLoadingStates] = useState({
    hotelId: false,
    guestIds: false,
  });
  const [bookingInfo, setBookingInfo] = useState(null);
  const [isLoadingBooking, setIsLoadingBooking] = useState(false);

  useEffect(() => {
    if (isCopyMode && stayData._id) {
      const stayCopy = { ...stayData };
      delete stayCopy._id;
      delete stayCopy.confirmationNo;
      if (stayCopy.reference) {
        stayCopy.reference = `${stayCopy.reference} (Copy)`;
      }
      setStayData(stayCopy);
    }
  }, [isCopyMode]);

  useEffect(() => {
    if (stayData.bookingId) {
      loadBookingInfo(stayData.bookingId);
    }
  }, [stayData.bookingId]);

  const loadBookingInfo = async (bookingId) => {
    try {
      setIsLoadingBooking(true);
      const result = await searchDocuments("bookings", bookingId, "_id");
      
      if (Array.isArray(result) && result.length > 0) {
        setBookingInfo(result[0]);
        
        if (result[0].confirmationNo) {
          setStayData(prev => ({
            ...prev,
            confirmationNo: result[0].confirmationNo
          }));
        }
      }
    } catch (error) {
      console.error("Error loading booking details:", error);
    } finally {
      setIsLoadingBooking(false);
    }
  };

  useEffect(() => {
    if (stayData.hotelId) {
      loadRoomTypes(stayData.hotelId);
    }
  }, [stayData.hotelId]);

  const isAnyFieldLoading = () => {
    return Object.values(fieldLoadingStates).some((isLoading) => isLoading);
  };

  useEffect(() => {
    setIsFormLoading(isAnyFieldLoading());
  }, [fieldLoadingStates]);

  const setFieldLoading = useCallback(
    (fieldPath: string, isLoading: boolean) => {
      setFieldLoadingStates((prev) => ({
        ...prev,
        [fieldPath]: isLoading,
      }));
    },
    []
  );

  const loadRoomTypes = async (hotelId: string) => {
    if (!hotelId) {
      setRoomTypeOptions(DEFAULT_ROOM_TYPE_OPTIONS);
      return;
    }

    setFieldLoading("hotelId", true);

    try {
      const result = await searchDocuments("hotels", hotelId, "_id");

      if (
        Array.isArray(result) &&
        result.length > 0 &&
        result[0].roomTypes?.length > 0
      ) {
        const hotelRoomTypes = result[0].roomTypes.map((type: string) => ({
          value: type,
          label: type,
        }));
        setRoomTypeOptions(hotelRoomTypes);

        if (
          stayData.roomType &&
          !result[0].roomTypes.includes(stayData.roomType)
        ) {
          setStayData((prev) => ({
            ...prev,
            roomType: "",
          }));
        }
      } else {
        setRoomTypeOptions(DEFAULT_ROOM_TYPE_OPTIONS);
      }
    } catch (error) {
      console.error("Error loading room types:", error);
      toast.error("Could not load room types from the selected hotel");
      setRoomTypeOptions(DEFAULT_ROOM_TYPE_OPTIONS);
    } finally {
      setFieldLoading("hotelId", false);
    }
  };

  const handleFieldChange = useCallback((fieldPath: string, value: any) => {
    setStayData((prev) => {
      const parts = fieldPath.split(".");
      const newState = { ...prev };

      let current = newState;
      for (let i = 0; i < parts.length - 1; i++) {
        if (!current[parts[i]]) current[parts[i]] = {};
        current = current[parts[i]];
      }

      current[parts[parts.length - 1]] = value;
      return newState;
    });

    setPendingChanges((prev) => ({
      ...prev,
      [fieldPath]: value,
    }));
  }, []);
  
  const handlePaymentInstructionChange = (
    fieldPath: string,
    value: string
  ) => {
    if (value === "custom") {
      handleFieldChange(fieldPath, "");
    } else {
      handleFieldChange(fieldPath, value);
    }
  };


  const handleAddContact = useCallback(() => {
    setIsContactModalOpen(true);
  }, []);

  const handleContactCreated = useCallback(
    (contactId: string, displayName: string) => {
      if (!contactId) return;

      setStayData((prev) => {
        const newState = { ...prev };
        if (!newState.guestIds) newState.guestIds = [];
        if (!newState.guestNames) newState.guestNames = [];
        if (!newState.guestIds.includes(contactId)) {
          newState.guestIds.push(contactId);
          newState.guestNames.push(displayName);
        }
        return newState;
      });

      setPendingChanges((prev) => ({
        ...prev,
        guestIds: true,
      }));
      setIsContactModalOpen(false);
    },
    []
  );

const handleSave = async () => {
  setIsSubmitting(true);

  try {
    if (!stayData.checkInDate || !stayData.checkOutDate) {
      toast.error("Please fill in required fields");
      setIsSubmitting(false);
      return;
    }

    if (!stayData.reference) {
      stayData.reference = `Stay ${new Date().toISOString().slice(0, 10)}`;
    }

    if (bookingId && !stayData.bookingId) {
      stayData.bookingId = bookingId;
    }

    let result;
    if (!isCopyMode && stayData._id) {
      result = await updateDocument("stays", stayData._id, stayData);
      if (!result.success) {
        toast.error(
          `Failed to update stay: ${result.error || "Unknown error"}`
        );
        setIsSubmitting(false);
        return;
      }
      toast.success("Stay updated successfully");
    } else {
      result = await createDocument("stays", stayData);
      if (!result.success) {
        toast.error(
          `Failed to ${isCopyMode ? "copy" : "create"} stay: ${
            result.error || "Unknown error"
          }`
        );
        setIsSubmitting(false);
        return;
      }
      toast.success(`Stay ${isCopyMode ? "copied" : "created"} successfully`);
    }

    if (onSave && result.data) {
      onSave(result.data);
    }

    onClose();
  } catch (error) {
    console.error("Save error:", error);
    toast.error("An unexpected error occurred");
    setIsSubmitting(false);
  }
}

  const isLinkedToBooking = !!stayData.bookingId || !!bookingConfirmationNo;
  
  const isStandardPaymentInstruction =
  stayData?.paymentInstructions &&
  PAYMENT_INSTRUCTION_OPTIONS.some(
    (option) =>
      option.value === stayData.paymentInstructions
  );

  const showCustomPaymentField = !isStandardPaymentInstruction;
  
  const paymentInstructionDropdownValue = isStandardPaymentInstruction
  ? stayData.paymentInstructions
  : "custom";

  return (
    <>
      {isContactModalOpen && (
        <ContactModal
          initialData={{ general: { role: "guest" } }}
          callback={handleContactCreated}
          onClose={() => setIsContactModalOpen(false)}
        />
      )}

      <div className="modal-overlay">
        <div className="modal-container">
          <div className="modal-header">
            <h2>
              {isCopyMode
                ? "Copy Stay"
                : stayData._id
                ? "Edit Stay"
                : "Add Stay"}
            </h2>
            <button className="close-button" onClick={onClose}>
              <X size={24} />
            </button>
          </div>

          <div className="modal-content">

            <div className="form-container">
              <div className="col-half">
                {/* {isLinkedToBooking ? (
                  <TextField
                    label="Booking Confirmation No."
                    fieldPath="confirmationNo"
                    value={stayData.confirmationNo || ""}
                    onChange={handleFieldChange}
                    isEditing={false}
                    disabled={true}
                  />
                ) : (
                  <AutoGeneratedField
                    label="Stay No."
                    fieldPath="confirmationNo"
                    value={stayData.confirmationNo || ""}
                    updateField={handleFieldChange}
                    isEditing={true}
                    type="stay"
                    allowRefresh={true}
                  />
                )} */}

                {stayData.bookingId && bookingInfo && (
                  <div className="booking-link-note">
                    <p>This stay is part of booking {formatConfirmationNumber(bookingInfo.confirmationNo)}</p>
                  </div>
                )}

                <RefField
                  label="Hotel"
                  fieldPath="hotelId"
                  nameFieldPath="hotelName"
                  value={stayData.hotelId || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  collectionName="hotels"
                  displayFields={["name", "address"]}
                  setFieldLoading={setFieldLoading}
                  required={true}
                />

                <TextField
                  label="Hotel Confirmation No."
                  fieldPath="hotelConfirmationNo"
                  value={stayData.hotelConfirmationNo || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                />

                <DropdownField
                  label="Room Type"
                  fieldPath="roomType"
                  value={stayData.roomType || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  options={roomTypeOptions}
                  placeholder={
                    fieldLoadingStates.hotelId
                      ? "Loading room types..."
                      : "Select a room type"
                  }
                  disabled={fieldLoadingStates.hotelId || !stayData.hotelId}
                />

                <div className="currency-group">
                  <label className="field-label">Room Price</label>
                  <div className="grouper">
                    <DropdownField
                      fieldPath="roomCurrency"
                      value={stayData.roomCurrency || "EUR"}
                      onChange={handleFieldChange}
                      isEditing={true}
                      options={CURRENCY_OPTIONS}
                      className="currency-select"
                      compact={true}
                    />

                    <TextField
                      fieldPath="roomPrice"
                      label=""
                      value={stayData.roomPrice || ""}
                      onChange={handleFieldChange}
                      isEditing={true}
                      type="number"
                      className="price-input"
                    />
                  </div>
                </div>

                <DropdownField
                  label="Payment Instructions"
                  fieldPath="paymentInstructions"
                  value={paymentInstructionDropdownValue || ""}
                  onChange={handlePaymentInstructionChange}
                  isEditing={true}
                  options={PAYMENT_INSTRUCTION_OPTIONS}
                />

                {showCustomPaymentField && (
                  <TextField
                    fieldPath="paymentInstructions"
                    label=""
                    value={
                      isStandardPaymentInstruction
                        ? ""
                        : stayData?.paymentInstructions || ""
                    }
                    onChange={handleFieldChange}
                    isEditing={true}
                    multiline={true}
                    rows={4}
                    placeholder="Enter custom payment instructions"
                  />
                )}

                <DropdownField
                  label="Cancellations"
                  fieldPath="cancellations"
                  value={stayData.cancellations || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  options={CANCELLATION_OPTIONS}
                />

                   <div className="currency-group">
                  <label className="field-label">Tax</label>
                  <div className="grouper">
                    <DropdownField
                      fieldPath="taxCurrency"
                      value={stayData.taxCurrency || stayData.roomCurrency || "EUR"}
                      onChange={handleFieldChange}
                      isEditing={true}
                      options={CURRENCY_OPTIONS}
                      className="currency-select"
                      compact={true}
                    />

                    <TextField
                      fieldPath="taxAmount"
                      label=""
                      value={stayData.taxAmount || ""}
                      onChange={handleFieldChange}
                      isEditing={true}
                      type="number"
                      className="price-input"
                    />
                  </div>
                </div>
                <MultiRefField
                  label="Guests"
                  fieldPath="guestIds"
                  value={stayData.guestIds || []}
                  updateField={handleFieldChange}
                  isEditing={true}
                  collectionName="contacts"
                  displayFields={["general.firstName", "general.lastName"]}
                  showQuickAdd={true}
                  setFieldLoading={setFieldLoading}
                />
              </div>

              <div className="col-half">
                <TextField
                  label="Check-in Date"
                  fieldPath="checkInDate"
                  value={stayData.checkInDate || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  type="date"
                  required={true}
                />

                <TextField
                  label="Check-out Date"
                  fieldPath="checkOutDate"
                  value={stayData.checkOutDate || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  type="date"
                  required={true}
                />

                <DropdownField
                  label="Status"
                  fieldPath="status"
                  value={stayData.status || "unconfirmed"}
                  onChange={handleFieldChange}
                  isEditing={true}
                  options={STATUS_OPTIONS}
                  required={true}
                />

                <RadioField
                  label="Prepaid"
                  fieldPath="prepaid"
                  value={stayData.prepaid || "no"}
                  updateField={handleFieldChange}
                  isEditing={true}
                  options={PREPAID_OPTIONS}
                  required={true}
                />

                {stayData.prepaid === "yes" && (
                  <TextField
                    label="Prepaid Details"
                    fieldPath="prepaidDetails"
                    value={stayData.prepaidDetails || ""}
                    onChange={handleFieldChange}
                    isEditing={true}
                    placeholder="e.g., Prepaid credit card 18/7"
                  />
                )}

                <TextField
                  label="Purchase Invoice"
                  fieldPath="purchaseInvoice"
                  value={stayData.purchaseInvoice || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                />

                <TextField
                  label="Special Requests"
                  fieldPath="specialRequests"
                  value={stayData.specialRequests || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  multiline={true}
                  rows={4}
                />

                <TextField
                  label="Remarks"
                  fieldPath="remarks"
                  value={stayData.remarks || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  multiline={true}
                  rows={4}
                />
                <TextField
                  label="Admin remarks (does NOT appear on confirmation)"
                  fieldPath="adminRemarks"
                  value={stayData.adminRemarks || ""}
                  onChange={handleFieldChange}
                  isEditing={true}
                  multiline={true}
                  rows={4}
                />
              </div>
            </div>

            <div className="modal-footer">
              <Button
                intent="secondary"
                icon={X}
                onClick={onClose}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button
                icon={Save}
                onClick={handleSave}
                disabled={isSubmitting || isFormLoading}
                isLoading={isSubmitting}
              >
                {isCopyMode
                  ? "Create Copy"
                  : stayData._id
                  ? "Update Stay"
                  : "Create Stay"}
              </Button>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        .grouper {
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }
        .currency-select {
          width: 80px;
        }
        .price-input {
          flex: 1;
        }
        .currency-group {
          margin-bottom: 16px;
        }
        .booking-link-note {
          margin-bottom: 16px;
          padding: 8px 12px;
          background-color: #f3f4f6;
          border-left: 3px solid #3b82f6;
          border-radius: 4px;
          font-size: 14px;
        }
        .booking-link-note p {
          margin: 0;
          color: #4b5563;
        }
      `}</style>
    </>
  );
}